<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从打车业务发展看技术的扩展性</title>
      <link href="/2021/08/29/tec-extension-by-express-business/"/>
      <url>/2021/08/29/tec-extension-by-express-business/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 从打车业务看技术的扩展性<br>tags:</p><ul><li>Java</li><li>Cola<br>categories:</li><li>后端开发<br>toc: true<br>img: ‘<a href="https://static.zzq0324.cn/FlEWJDfV2f7gmIj26God-MfeOsMJ&#39;">https://static.zzq0324.cn/FlEWJDfV2f7gmIj26God-MfeOsMJ&#39;</a><br>author: zzq0324<br>top: ‘false’<br>cover: ‘false’<br>date: 2021-08-29 10:17:11<br>updated: 2021-08-29 22:58:00</li></ul><hr><blockquote><p>从打车业务的发展，结合订单的设计演变看技术扩展性的重要性。对于业务来说，一般绕不开多场景、多状态，因此在技术设计之初要充分评估和考虑，保持扩展性又不过度设计，为未来能更快赋能业务打下坚实的基础。<br>Cola的状态机和扩展节点是基于业务抽象总结的，可以很好的解决这类场景，在实际开发中可以引入或者借鉴这种思想。</p></blockquote><h2 id="打车案例"><a href="#打车案例" class="headerlink" title="打车案例"></a>打车案例</h2><p>假设新业务的发展需要经过三个阶段，接下来围绕几个阶段来介绍打车业务的发展和技术的演变过程。<br><img src="https://static.zzq0324.cn/Fn4qLINSAuYAALqwtsBBHd2w5A1-" alt="新业务发展三个阶段"></p><h3 id="孵化期"><a href="#孵化期" class="headerlink" title="孵化期"></a>孵化期</h3><p><strong>孵化阶段需要快速迭代、快速试错来验证市场。</strong></p><blockquote><p><strong>事业部</strong>：最近有个想法，出租车打车很不方便，得走到路边还经常打不到车，准备孵化个打车业务看看有没有市场，感觉这块蛋糕很大，你帮我设计下。<br><strong>产品经理</strong>：好的，您有更详细的一些想法吗？<br><strong>事业部</strong>：我的需求是用户可以在App上输入起点和重点，然后下单；司机可以在App上接单，接送后结单收钱。很简单，就这样，你先帮我细化设计下，设计完我们再碰一稿。<br><strong>产品经理</strong>：好吧……（一口老血喷出来）</p></blockquote><p><img src="https://static.zzq0324.cn/FuCeRsATyi4HPg6icgtzPn9naT2v" alt="吐血"></p><p>产品经理还是很专业的，按照事业部给的“抽象业务”进行了一番设计：<br><img src="https://static.zzq0324.cn/FguY0lFLXeMj9S86B2-5QezXmIw-" alt="打车业务设计"></p><p>需求评审之后，开发开始了表结构的设计，然后进行了分工协作，就开始编码了。为了更聚焦，我们以订单业务的代码为例来进行说明。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 下单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验</span>        <span class="token comment">// TODO(xxx) 设置状态为下单状态</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 派单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验</span>        <span class="token comment">// TODO(xxx) 派单给合适的司机</span>        <span class="token comment">// TODO(xxx) 更新订单状态为履约中</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 取消订单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验，是否可取消</span>        <span class="token comment">// TODO(xxx) 取消订单逻辑</span>        <span class="token comment">// TODO(xxx) 更新订单状态为取消</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 完成订单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finishOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验</span>        <span class="token comment">// TODO(xxx) 完成订单逻辑</span>        <span class="token comment">// TODO(xxx) 更新订单状态为完成</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="成长期"><a href="#成长期" class="headerlink" title="成长期"></a>成长期</h3><p>经过2个月的开发，项目顺利上线。公司集中资源进行了大范围的推广，获得了很好的市场反应。试运行3个月后，公司针对该业务进行了复盘总结，觉得这个业务方向是没问题的，可以加大投入，在业务的深度(细分)和广度上(范围)进行扩展。于是有了以下对话：</p><blockquote><p><strong>事业部</strong>：打车业务经过3个月的试运行，得到了市场的验证。我们接下来决定对业务进行细分，类型有专车、快车，在业务上会有一些区分。<br><strong>产品经理</strong>：没问题，我设计一下，保证您满意。</p></blockquote><p>研发根据设计针对订单业务做了一番调整，每个业务操作的业务逻辑处理里通过if…else…进行了区分，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 下单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"专车"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 下单业务专车逻辑处理</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 下单业务快车逻辑处理</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// TODO(xxx) 设置状态为下单状态</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 派单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"专车"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 派单业务专车逻辑处理</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 派单业务快车逻辑处理</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// TODO(xxx) 更新订单状态为履约中</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 取消订单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancelOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验，是否可取消</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"专车"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 取消业务专车逻辑处理</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 取消业务快车逻辑处理</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// TODO(xxx) 更新订单状态为取消</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 完成订单     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finishOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO(xxx) 参数完整性校验</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>orderType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"专车"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 完成业务专车逻辑处理</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// TODO(xxx) 完成业务快车逻辑处理</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// TODO(xxx) 更新订单状态为完成</span>        <span class="token comment">// TODO(xxx) 发送MQ</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再过了一段时间，业务方觉得市场反应更好，于是希望对业务和场景进行细分：</p><blockquote><p><strong>事业部</strong>：业务类型除了原来的专车、快车，还要增加出租车和拼车，其中专车又分舒适型、豪华型、商务型，快车有普通用车、接送机、企业用车的场景……<br><strong>产品经理</strong>：没问题，我设计一下，保证您满意。</p></blockquote><p>产品经理针对状态机和业务流程进行了重新的设计和梳理，在和研发做需求评审的时候，研发沉不住气了：</p><blockquote><p><strong>研发</strong>：哇靠，不早说有这种需求，早说我们就设计的更好一点。这个需求现在的代码压根没法支持，除非重构，不然没有办法实现；<br><strong>产品经理</strong>：再想一下有没有更简单的方法呢？<br><strong>研发</strong>：没有<br><strong>产品经理</strong>：好吧……（一口老血喷出来）</p></blockquote><p><em><strong>如果没有设计好，这种人为的复杂性导致系统越来越臃肿，越来越难维护，酱缸的老代码发出一阵阵恶臭，新来的同学，往往要捂着鼻子抠几天甚至几个月，才能理清系统和业务脉络，然后又一头扎进各种bug fix，业务修补的恶性循环中，暗无天日！</strong></em><br><img src="https://static.zzq0324.cn/FuBZY-O7aH06cEOk40HCe1SfjE7i" alt="暗无天日的bug fix"></p><p>业务的发展过程中，唯一不变的就是变化。如果快速支撑业务，就要寻找出不变的点，以不变应万变，这才是上上策。</p><h2 id="COLA介绍"><a href="#COLA介绍" class="headerlink" title="COLA介绍"></a>COLA介绍</h2><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><h4 id="什么是状态机"><a href="#什么是状态机" class="headerlink" title="什么是状态机"></a>什么是状态机</h4><p>状态机是有限状态自动机的简称，表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。<br>先来解释什么是“状态”（ State ）。现实事物是有不同状态的，例如一个LED等，就有亮和灭两种状态。我们通常所说的状态机是有限状态机，也就是被描述的事物的状态的数量是有限个，例如LED灯的状态就是两个亮和灭。</p><p>状态机一般包含以下四个要素：</p><ul><li>State：状态。一个标准的状态机最少包含两个状态：初始和终态。</li><li>Event：事件。还有中描述叫Trigger，表达的意思都一样，就是要执行某个操作的触发器或口令：当状态机处于某个状态时，只有外界告诉状态机要干什么事情的时候，状态机才会去执行具体的行为，来完成外界想要它完成的操作。</li><li>Action：行为。状态变更索要执行的具体行为。</li><li>Transition：变更。一个状态接收一个事件执行了某些行为到达了另外一个状态的过程就是一个Transition。定义Transition就是在定义状态机的运转流程。</li></ul><blockquote><p><strong>类比</strong>：吃饭的，我们喊一声“点菜”，服务员就会拿着本子过来记录要点什么菜，点完之后会从待下单状态改为已下单状态。待下单、已下单就是State，点菜就是Event，服务员拿本子过来记录就是Action，整个过程的运转就是一个Transition。</p></blockquote><h4 id="状态机有什么用"><a href="#状态机有什么用" class="headerlink" title="状态机有什么用"></a>状态机有什么用</h4><p>状态机可以让程序的结构更加清晰，可读性也会更高。通过编排的方式将状态、事件和对应的处理逻辑定义好，让整个流程更加规整、有序。</p><h4 id="COLA状态机实现"><a href="#COLA状态机实现" class="headerlink" title="COLA状态机实现"></a>COLA状态机实现</h4><ul><li>State：状态</li><li>Event：事件，状态由事件触发，引起变化</li><li>Transition：流转，表示从一个状态到另一个状态</li><li>External Transition：外部流转，两个不同状态之间的流转</li><li>Internal Transition：内部流转，同一个状态之间的流转</li><li>Condition：条件，表示是否允许到达某个状态</li><li>Action：动作，到达某个状态之后，可以做什么</li><li>StateMachine：状态机</li></ul><p><img src="https://static.zzq0324.cn/FldHBKOGKgUWCUVAHEZ_n_dWKUFl" alt="Cola状态机"></p><p>整个状态机的核心代码如下所示：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//StateMachine</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateMachineImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> machineId<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">State</span><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stateMap<span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>  <span class="token comment">//State</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">S</span> stateId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">Transition</span><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span><span class="token punctuation">></span></span> transitions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>  <span class="token comment">//Transition</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransitionImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">Transition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">></span></span> source<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">State</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span> <span class="token class-name">E</span><span class="token punctuation">,</span> <span class="token class-name">C</span><span class="token punctuation">></span></span> target<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">E</span> event<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">></span></span> condition<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Action</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">S</span><span class="token punctuation">,</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">C</span><span class="token punctuation">></span></span> action<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体使用可以看单元测试类<a href="https://github.com/alibaba/COLA/blob/master/cola-components/cola-component-statemachine/src/test/java/com/alibaba/cola/test/StateMachineTest.java">StateMachineTest.java</a>，摘取如下：<br><img src="https://static.zzq0324.cn/FtLBZVhr-rTi05ARF0Nep1vkjRRA" alt="状态机使用Demo"></p><h3 id="扩展节点"><a href="#扩展节点" class="headerlink" title="扩展节点"></a>扩展节点</h3><h4 id="什么是扩展节点"><a href="#什么是扩展节点" class="headerlink" title="什么是扩展节点"></a>什么是扩展节点</h4><blockquote><p><strong>扩展节点</strong>(Extension Point)本身是一个接口，是很多可扩展项目中一个关键的机制，可以利用扩展向平台添加新功能。按照扩展点（Extension Point）定义的规范进行实现的部分称为<strong>扩展</strong>。</p></blockquote><h4 id="扩展节点有什么用"><a href="#扩展节点有什么用" class="headerlink" title="扩展节点有什么用"></a>扩展节点有什么用</h4><blockquote><p>扩展节点提高了系统的扩展性，基于扩展节点，自己或者其他研发同学可以在不污染现有业务逻辑的情况下进行扩展，非常适合一块逻辑在不同的业务有不同的实现的场景。</p></blockquote><h4 id="COLA扩展节点实现"><a href="#COLA扩展节点实现" class="headerlink" title="COLA扩展节点实现"></a>COLA扩展节点实现</h4><p>首先看下COLA中扩展节点注解的源码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Extension  * @author fulan.zjf 2017-11-05 */</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Extension</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">bizId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">default</span> <span class="token class-name">BizScenario</span><span class="token punctuation">.</span>DEFAULT_BIZ_ID<span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">useCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">BizScenario</span><span class="token punctuation">.</span>DEFAULT_USE_CASE<span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">scenario</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">BizScenario</span><span class="token punctuation">.</span>DEFAULT_SCENARIO<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>bizId：指某个具体的业务，例如淘宝、天猫、聚划算；</li><li>useCase：对应业务下的某个Case，例如登录，下单；</li><li>Scenario：对应的场景，例如登录场景下有微信登陆、小程序登录、手机号登录等。</li><li>该方式实现扩展节点很好的对应了测试用例（也是Case和Scenario）。下图更直观的表达了扩展节点对应的含义：<br><img src="https://static.zzq0324.cn/Fu57Xb1NsipmoEurzlgCTA4CqrW-" alt="Extension场景说明"></li></ul><p>在COLA中，要实现扩展节点只需要定义扩展节点（需要以ExtPt结尾），然后进行实现即可，如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 定义扩展节点，扩展节点名称需要以ExtPt结尾</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">ExtensionPointI</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 处理订单     *     * @param context 上下文信息     */</span>    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">C</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 扩展节点实现</span><span class="token annotation punctuation">@Extension</span><span class="token punctuation">(</span>useCase <span class="token operator">=</span> <span class="token class-name">UseCase</span><span class="token punctuation">.</span>CREATE_ORDER<span class="token punctuation">,</span> scenario <span class="token operator">=</span> <span class="token class-name">Scenario</span><span class="token punctuation">.</span>PREPAY<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrepayCreateOrderExtPt</span> <span class="token keyword">implements</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">OrderContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current processor: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于COLA扩展节点的核心实现代码摘取如下：<br><img src="https://static.zzq0324.cn/FhVQQ30n_4FezlfcWni2BYkFarrO" alt="Cola扩展节点查找过程"><br>COLA优先根据bizId + useCase + scenario查找扩展节点实现，如果找到返回并执行；如果找不到继续根据bizId + useCase查找，再找不到根据bizId进行查找。这个过程本身做了降级的兼容。</p><h2 id="重构打车业务"><a href="#重构打车业务" class="headerlink" title="重构打车业务"></a>重构打车业务</h2><p>了解完COLA的状态机和扩展节点，我们一起来看下怎么重构打车的订单业务吧！</p><p><em><strong>需要注意的是，不管是用COLA还是自己实现状态机和扩展节点，很重要的一环还是要对业务做好充分的分析设计，如果没设计好，再好的框架还是会出现一系列问题。</strong></em></p><p>根据前面梳理的状态机的几个要素：State、Event、Action、Transition，我们要根据业务重新梳理下，其中State部分产品已经梳理完成，可以直接使用；Event部分可以基于几个发生的重要节点来定义：下单、派单、支付、完成、取消来，对应的Action由于在不同的业务类型、场景下会有不同的实现，可以考虑扩展节点来实现。</p><p>下面通过简单的代码来演示下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 初始化状态机</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateMachineInitializer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ExtensionExecutor</span> extensionExecutor<span class="token punctuation">;</span>    <span class="token comment">/**     * 初始化主订单状态机     */</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initOrderStateMachine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StateMachineBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">,</span> <span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> builder <span class="token operator">=</span> <span class="token class-name">StateMachineBuilderFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 订单创建，condition看实际条件确定是否设置</span>        builder<span class="token punctuation">.</span><span class="token function">internalTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">within</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">OrderEvent</span><span class="token punctuation">.</span>CREATE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">UseCase</span><span class="token punctuation">.</span>CREATE_ORDER<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 订单由创建状态变为支付状态，condition看实际条件确定是否设置</span>        builder<span class="token punctuation">.</span><span class="token function">externalTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>PAID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">OrderEvent</span><span class="token punctuation">.</span>PAY<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">UseCase</span><span class="token punctuation">.</span>PAY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 取消</span>        builder<span class="token punctuation">.</span><span class="token function">externalTransition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token class-name">OrderStatus</span><span class="token punctuation">.</span>CANCELED<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token class-name">OrderEvent</span><span class="token punctuation">.</span>CANCEL<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">UseCase</span><span class="token punctuation">.</span>CANCEL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">StateMachines</span><span class="token punctuation">.</span>ORDER_STATE_MACHINE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Action</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStatus</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">,</span> <span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> <span class="token function">processOrder</span><span class="token punctuation">(</span><span class="token class-name">String</span> useCase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>from<span class="token punctuation">,</span> <span class="token keyword">to</span><span class="token punctuation">,</span> event<span class="token punctuation">,</span> ctx<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">BizScenario</span> bizScenario <span class="token operator">=</span> <span class="token class-name">BizScenario</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">BizScenario</span><span class="token punctuation">.</span>DEFAULT_BIZ_ID<span class="token punctuation">,</span> useCase<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">getOrderType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            extensionExecutor<span class="token punctuation">.</span><span class="token function">executeVoid</span><span class="token punctuation">(</span><span class="token class-name">OrderExtPt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> bizScenario<span class="token punctuation">,</span> extension <span class="token operator">-></span> extension<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义订单扩展节点</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Context</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">ExtensionPointI</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 处理订单     *     * @param context 上下文信息     */</span>    <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">C</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 快车下单，机场接机场景 * * @author: Eric * @date: 2021/8/25 11:10 下午 * @since: 1.0.0 */</span><span class="token annotation punctuation">@Extension</span><span class="token punctuation">(</span>bizId <span class="token operator">=</span> <span class="token string">"express"</span><span class="token punctuation">,</span> useCase <span class="token operator">=</span> <span class="token string">"placeOrder"</span><span class="token punctuation">,</span> scenario<span class="token operator">=</span><span class="token string">"airport"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressCreateOrderExtPt</span> <span class="token keyword">implements</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">OrderContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current processor: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 专车下单, 所有的接单通用 * * @author: Eric * @date: 2021/8/25 11:10 下午 * @since: 1.0.0 */</span><span class="token annotation punctuation">@Extension</span><span class="token punctuation">(</span>bizId <span class="token operator">=</span> <span class="token string">"tailored"</span><span class="token punctuation">,</span> useCase <span class="token operator">=</span> <span class="token string">"placeOrder"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TailoredCarCreateOrderExtPt</span> <span class="token keyword">implements</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">OrderContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current processor: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 快车取消订单 * * @author: Eric * @date: 2021/8/25 11:10 下午 * @since: 1.0.0 */</span><span class="token annotation punctuation">@Extension</span><span class="token punctuation">(</span>bizId <span class="token operator">=</span> <span class="token string">"express"</span><span class="token punctuation">,</span> useCase <span class="token operator">=</span> <span class="token string">"cancelOrder"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressCancelOrderExtPt</span> <span class="token keyword">implements</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">OrderContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current processor: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 专车取消订单 * * @author: Eric * @date: 2021/8/25 11:10 下午 * @since: 1.0.0 */</span><span class="token annotation punctuation">@Extension</span><span class="token punctuation">(</span>bizId <span class="token operator">=</span> <span class="token string">"tailored"</span><span class="token punctuation">,</span> useCase <span class="token operator">=</span> <span class="token string">"cancelOrder"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TailoredCarCancelExtPt</span> <span class="token keyword">implements</span> <span class="token class-name">OrderExtPt</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderContext</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">OrderContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"current processor: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://static.zzq0324.cn/FrTTOnE610_Ou6jYO2gJBTMWRWDZ" alt="重构完，就像买了个好慷的收纳服务，收拾的规规整整"></p><p><strong>未来如果还有新业务或者新场景，只需要增加一个新的扩展节点实现就可以了，对现有逻辑不影响</strong></p><blockquote><p><strong>研发</strong>：还要增加新的打车类型或者场景吗？我们可以很快实现。<br><strong>产品经理</strong>：我问一下事业部要不要加<br><strong>事业部</strong>：暂时先不用，我们先运营，有需要再提需求哈。</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/0GfCOUEw4svvSQVoShjJDw">高德打车通用可编排订单状态机引擎设计</a></li><li><a href="https://github.com/alibaba/COLA">COLA: Clean Object-oriented &amp; Layered Architecture</a></li><li><a href="https://cloud.tencent.com/developer/news/603123">给 DSL 开个脑洞：无状态的状态机</a></li><li><a href="https://www.cnblogs.com/jy107600/p/11464985.html">Java SPI与Dubbo SPI 详解</a></li><li><a href="https://www.jianshu.com/p/d48e0d565618">有限状态机实现-状态机介绍</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Cola </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL慢查询影响业务要怎么紧急处理？</title>
      <link href="/2021/08/06/mysql-slow-query-how-to-do/"/>
      <url>/2021/08/06/mysql-slow-query-how-to-do/</url>
      
        <content type="html"><![CDATA[<blockquote><p>系统上线后，发现数据库慢查询导致整个数据库实例的CPU飙高，优化程序再上线需要一定的时间，无法短时间内解决，这时候应该怎么紧急处理？本文将基于MySQL谈一下慢查询下的应急处理方案。</p></blockquote><h2 id="基于MySQL-Query-Rewrite组件"><a href="#基于MySQL-Query-Rewrite组件" class="headerlink" title="基于MySQL Query Rewrite组件"></a>基于MySQL <code>Query Rewrite</code>组件</h2><p>从<code>MySQL 5.7.6</code>版本开始支持<code>Rewrite Plugin</code>，可以将符合条件的SQL进行重写。这个特性还是非常有用的，可以根据实际需要去编写符合要求的限制规则。</p><h3 id="安装和卸载插件"><a href="#安装和卸载插件" class="headerlink" title="安装和卸载插件"></a>安装和卸载插件</h3><p>MySQL的安装目录的<code>share</code>文件夹下自带<code>install_rewriter.sql</code>和<code>uninstall_rewriter.sql</code>。可以通过以下方式来进行安装和卸载：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">shell<span class="token operator">></span> mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p <span class="token operator">&lt;</span> install_rewriter<span class="token punctuation">.</span><span class="token keyword">sql</span>Enter password: <span class="token punctuation">(</span>enter root password here<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行后可以通过命令查看：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">SHOW</span> <span class="token keyword">GLOBAL</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'rewriter_enabled'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span class="token operator">|</span> rewriter_enabled <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">------------------+-------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，卸载命令如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">shell<span class="token operator">></span> mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p <span class="token operator">&lt;</span> uninstall_rewriter<span class="token punctuation">.</span><span class="token keyword">sql</span>Enter password: <span class="token punctuation">(</span>enter root password here<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装之后可以看到MySQL实例上增加了一个名叫<code>query_rewrite</code>的数据库。</p><h3 id="设置重写规则"><a href="#设置重写规则" class="headerlink" title="设置重写规则"></a>设置重写规则</h3><p>规则保存在<code>query_rewrite.rewrite_rules</code>表。重写规则可以参照以下例子：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 插入替换规则，只要匹配的语句直接替换</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> query_rewrite<span class="token punctuation">.</span>rewrite_rules    <span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>    <span class="token string">'SELECT * FROM appdb.users WHERE id = ?'</span><span class="token punctuation">,</span>    <span class="token string">'SELECT * FROM appdb.users WHERE user_id = ?'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入替换规则，指定数据库匹配的语句直接替换</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> query_rewrite<span class="token punctuation">.</span>rewrite_rules    <span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> replacement<span class="token punctuation">,</span> pattern_database<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span>    <span class="token string">'SELECT * FROM users WHERE id = ?'</span><span class="token punctuation">,</span>    <span class="token string">'SELECT * FROM users WHERE user_id = ?'</span><span class="token punctuation">,</span>    <span class="token string">'appdb'</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 调用存储过程让规则生效</span><span class="token keyword">CALL</span> query_rewrite<span class="token punctuation">.</span>flush_rewrite_rules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：设置之后一定要执行<code>query_rewrite.flush_rewrite_rules()</code>生效规则，如果没执行可能会导致误以为添加了但是不生效。</p></blockquote><p>设置规则后还可以通过修改规则的启用状态来控制是否生效，如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- enabled有2个值，YES生效，NO禁用</span><span class="token keyword">UPDATE</span> query_rewrite<span class="token punctuation">.</span>rewrite_rules <span class="token keyword">SET</span> enabled <span class="token operator">=</span> <span class="token string">'NO'</span> <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">-- 还是要继续执行</span><span class="token keyword">CALL</span> query_rewrite<span class="token punctuation">.</span>flush_rewrite_rules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阿里云SQL限流功能"><a href="#阿里云SQL限流功能" class="headerlink" title="阿里云SQL限流功能"></a>阿里云<code>SQL限流</code>功能</h2><ul><li>登录<a href="https://hdm.console.aliyun.com/?spm=a2c4g.11186623.2.5.69722872r0qSAW">DAS控制台</a>;</li><li>在左侧导航栏中单击实例监控;</li><li>单击对应的数据库实例名称，进入实例详情页;</li><li>进入实例会话页面，具体操作请参见<a href="https://help.aliyun.com/document_detail/94842.htm?spm=a2c4g.11186623.2.6.69722872r0qSAW">实例会话</a>;</li><li>在<code>实例会话</code>页面，单击<code>SQL限流</code><br><img src="https://static.zzq0324.cn/FqR477bUb4TsyXQUiLZDSarjQU4M" alt="SQL限流界面"></li><li>在<code>SQL限流（过滤）</code>对话框，单击页面左上角<code>创建</code><br><img src="https://static.zzq0324.cn/FqDuZNQIdiQn1EQACmr0ebWpuy6h" alt="创建限流"></li><li>在创建SQL限流规则对话框中，填入相应信息，单击创建<br><img src="https://static.zzq0324.cn/FsKN9PPQTICUxWyAfKjV--29YxAm" alt="创建限流字段信息"></li><li>SQL限流规则创建完成后，您可以在SQL限流列表查看SQL规则的状态<br><img src="https://static.zzq0324.cn/Fl_XwxqF2asWHCp9NVDMS9zGmDTv" alt="限流规则列表"></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://dev.mysql.com/doc/refman/5.7/en/rewriter-query-rewrite-plugin-installation.html">Installing or Uninstalling the Rewriter Query Rewrite Plugin</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/rewriter-query-rewrite-plugin-usage.html">Using the Rewriter Query Rewrite Plugin</a></li><li><a href="https://dev.mysql.com/doc/refman/5.7/en/rewriter-query-rewrite-plugin-reference.html">Rewriter Query Rewrite Plugin Reference</a></li><li><a href="https://help.aliyun.com/document_detail/131417.html">阿里云SQL限流</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记IDEA Profiler排查内存泄露导致的Full GC问题</title>
      <link href="/2021/07/29/idea-profiler-memory-leak-full-gc/"/>
      <url>/2021/07/29/idea-profiler-memory-leak-full-gc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>内存泄露在实际开发过程中会比较经常遇到，如何排查和解决是非常关键的。“工欲善其事必先利其器”，找到好的工具才能事半功倍。本文将介绍使用<code>IDEA Profiler</code>排查问题。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近通过<code>Pinpoint</code>的监控发现有个服务堆内存一直高居不下，不时触发<code>Full GC</code>，徘徊在危险的边缘。虽然从监控上看频率还不会太高，每次停顿时间相对也比较短，还是担心有一定隐患，因此需要针对性的做一些排查。</p><p><img src="https://static.zzq0324.cn/FtDSWPco_C4-ky5H-J4FgJ7CCnnY" alt="监控信息"></p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>排查还是需要一些产线的环境和数据做支撑，因此决定找其中一个服务节点，将堆和栈信息导到本地进行分析。于是联系运维执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出线程信息</span>jcmd <span class="token operator">&lt;</span>PID<span class="token operator">></span> Thread.print <span class="token operator">></span> thread.tdump <span class="token comment"># 堆转储</span>jcmd <span class="token operator">&lt;</span>PID<span class="token operator">></span> GC.heap_dump heap_dump.hprof <span class="token comment"># 类信息</span>jcmd <span class="token operator">&lt;</span>PID<span class="token operator">></span> GC.class_histogram <span class="token operator">></span> class_histogram.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>备注：由于思考不周，堆转储的时候触发了STW，因此在短时间内对业务带来了一定的影响，也是前期考虑不周的地方。</strong></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="分析线程信息"><a href="#分析线程信息" class="headerlink" title="分析线程信息"></a>分析线程信息</h3><p>从线程信息上看没有BLOCK、Deadlock等的相关信息，整体情况正常。</p><h3 id="分析类信息"><a href="#分析类信息" class="headerlink" title="分析类信息"></a>分析类信息</h3><p>发现<code>java.util.HashMap$Node</code>有19949698个实例，占用内存将近900M。猜测这边有问题，但是还没法定位。</p><h3 id="分析堆转储信息"><a href="#分析堆转储信息" class="headerlink" title="分析堆转储信息"></a>分析堆转储信息</h3><p>通过IDEA的Profiler进行堆分析，步骤如下：</p><ul><li>打开Profiler窗口，路径为：View → Tool Windows → Profiler<br><img src="https://static.zzq0324.cn/Fri6XY_1hv_gHK2Vumggh5tEjSPc" alt="打开Profiler窗口"></li><li>打开堆转储信息，路径为：Run → Open Profiler Snapshot，然后选中dump的信息<br><img src="https://static.zzq0324.cn/FqsijzIqqM6VYC_-cBuhBqn072xc" alt="打开堆转储信息"></li><li>等待解析完成，此时可以通过窗口看到整体的情况，还是可以发现<code>java.util.HashMap$Node</code>的内存占用较大。切换到<code>Biggest Objects</code>可以看到<code>RingBuffer</code>的Retained占1.9G多，怀疑跟<code>Disruptor</code>框架有关系。<br><img src="https://static.zzq0324.cn/FvQvzFaairR1B5VikokTdOfJffwq" alt="RingBuffer Retained占用内存过高"></li></ul><p>因此看了下这块的初始化配置，发现环形大小设置为1024x256，也就是26万个环形大小，按目前的业务情况每个对象占用8K左右，就是将近2G的堆空间了，符合现状。初始化代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisruptorConfig</span> <span class="token punctuation">&#123;</span>     <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"logEventRingBuffer"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RingBuffer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CreateLogEvent</span><span class="token punctuation">></span></span> <span class="token function">messageModelRingBuffer</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CreateLogEventHandler</span> createLogEventHandler<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//定义用于事件处理的线程工厂</span>        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//指定事件工厂</span>        <span class="token class-name">CreateLogEventFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateLogEventFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//指定ringbuffer字节大小，必须为2的N次方（能将求模运算转为位运算提高效率），否则将影响效率</span>        <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token punctuation">;</span>         <span class="token comment">//单线程模式，获取额外的性能</span>        <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CreateLogEvent</span><span class="token punctuation">></span></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> bufferSize<span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> <span class="token class-name">ProducerType</span><span class="token punctuation">.</span>SINGLE<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BlockingWaitStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//设置事件业务处理器---消费者</span>        disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span>createLogEventHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 启动disruptor线程</span>        disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"disruptor started"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//获取ringbuffer环，用于接取生产者生产的事件</span>        <span class="token class-name">RingBuffer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CreateLogEvent</span><span class="token punctuation">></span></span> ringBuffer <span class="token operator">=</span> disruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ringBuffer<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照目前的情况，只需要将这个值调小，例如1024x8即可，这样可以最大限度减少占用的堆空间。</p><p>备注：Profiler上看到的Shallow和Retained代表的意思如下：<br>Shallow：对象本身占据的内存的大小；<br>Retained：当前对象大小+当前对象可直接或间接引用到的对象的大小总和。<br>关于Shallow Size和Retained Size的区别详见：<a href="https://blog.csdn.net/a740169405/article/details/53610689">https://blog.csdn.net/a740169405/article/details/53610689</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>用框架之前要对具体的配置有更清晰的了解，避免出现状况的时候束手无策，也容易产生问题；</li><li>后面需要考虑更好的方式来对产线的堆做转储，避免STW的产生。目前还未有好的方案，欢迎有想法的朋友交流。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> TroubleShoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HomeBrew设置阿里云镜像</title>
      <link href="/2021/07/28/homebrew-mirror-set-aliyun/"/>
      <url>/2021/07/28/homebrew-mirror-set-aliyun/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用<code>HomeBrew</code>官方的源下载很慢，等半天还经常中断。为提高下载安装速度，推荐设置为国内的镜像。</p></blockquote><h2 id="配置阿里云镜像"><a href="#配置阿里云镜像" class="headerlink" title="配置阿里云镜像"></a>配置阿里云镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换brew.git:</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.aliyun.com/homebrew/brew.git<span class="token comment"># 替换homebrew-core.git:</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew --repo<span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.aliyun.com/homebrew/homebrew-core.git<span class="token comment"># 应用生效</span>brew update<span class="token comment"># bash替换homebrew-bottles:</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> <span class="token operator">>></span> ~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile<span class="token comment"># zsh替换homebrew-bottles:</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles'</span> <span class="token operator">>></span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>执行<code>source ~/.zshrc</code>的时候报<code>compinit:503: no such file or directory: /usr/local/share/zsh/site-functions/_brew_cask</code><br>解决方案：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先清除</span>brew cleanup<span class="token comment"># 再执行source</span><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>配置之后，速度就快很多倍了，效率杠杠~</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HomeBrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>钉钉专注模式</title>
      <link href="/2021/07/27/dingtalk-focus-mode/"/>
      <url>/2021/07/27/dingtalk-focus-mode/</url>
      
        <content type="html"><![CDATA[<blockquote><p>大家可能都会碰到一个问题，工作的时候经常会被消息打断，有些消息可能是不相关或者不紧急的。如何能最大减少程度减少消息的干扰？今天就来看看钉钉的专注模式。</p></blockquote><h2 id="什么是专注模式？"><a href="#什么是专注模式？" class="headerlink" title="什么是专注模式？"></a>什么是专注模式？</h2><p>【专注模式】是对聊天窗口的管理，可以对群聊/单聊进行分组、新增分组、分组排序等。开启之后，帮助减轻会话界面消息过载的烦恼，从而提高工作沟通效率。</p><h2 id="如何开启-关闭专注模式"><a href="#如何开启-关闭专注模式" class="headerlink" title="如何开启/关闭专注模式"></a>如何开启/关闭专注模式</h2><p>可通过如下路径开启/关闭专注模式：</p><ul><li>手机端通过【左上角头像】/【我的】-【设置】- 【效率套件】-开启/关闭【专注模式】；</li><li>电脑端通过【左上角头像】- Windows【设置】-【效率套件】-开启/关闭【专注模式】/Mac【偏好设置】-【通用】- 开启/关闭【专注模式】。<br><img src="https://static.zzq0324.cn/FkXOwHgUDw-U3nu9Jb7twUfQ68uu" alt="钉钉专注模式"></li></ul><h2 id="温馨提示"><a href="#温馨提示" class="headerlink" title="温馨提示"></a>温馨提示</h2><ul><li>专注模式开启后，手机端和PC端自动同步，若手机端或者PC端单独关闭专注模式，则不支持多端同步；</li><li>电脑端点击头像后下面显示：智能客服当前组织以及智能客服状态不支持关闭专注模式，建议退出该企业后关闭。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 钉钉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过FontMetrics和AffineTransform等比例缩放字体</title>
      <link href="/2021/07/24/fontMetrics-and-affineTransform/"/>
      <url>/2021/07/24/fontMetrics-and-affineTransform/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>使用<code>Graphics2D</code>进行绘图的过程中，对于指定的区域可能会填充文字，如果文字个数是不固定的话，区域的宽度很难把控。本文将介绍一个方法，通过代码实现对字体的等比例缩放。</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ul><li>Graphics2D设置要使用的字体及其大小；</li><li>通过FontMetrics计算要填充的文字填充后需要占用的宽度；</li><li>计算的宽度和当前画图区域的宽度进行比较(假设当前计算要占用的宽度为W1，预计要存放文字的区域为W2)：<ul><li>如果W1比W2还小，证明预置的空间还未占满，可以不做任何处理，因为空间放得下；</li><li>如果W1比W2还大，那么W1/W2的值即为缩放的比例，记录为S1（需要将文字大小等比例缩放才能在预置的空间显示出来）；</li><li>重新设置字体大小(原来的大小乘以S1，等比例缩放)。</li></ul></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setRenderingHint</span><span class="token punctuation">(</span><span class="token class-name">RenderingHints</span><span class="token punctuation">.</span>KEY_ANTIALIASING<span class="token punctuation">,</span> <span class="token class-name">RenderingHints</span><span class="token punctuation">.</span>VALUE_ANTIALIAS_ON<span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FontMetrics</span> fm <span class="token operator">=</span> g2d<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 名称宽度，+5为了修正</span><span class="token keyword">int</span> textWidth <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// 名称高度</span><span class="token keyword">int</span> textHeight <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果超过预置的文本宽度textWidth，进行缩放</span><span class="token keyword">if</span> <span class="token punctuation">(</span>textWidth <span class="token operator">></span> width <span class="token operator">||</span> textHeight <span class="token operator">></span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">double</span> xScale <span class="token operator">=</span> width <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> textWidth<span class="token punctuation">;</span>  <span class="token keyword">double</span> yScale <span class="token operator">=</span> height <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> textHeight<span class="token punctuation">;</span>  <span class="token keyword">double</span> scale <span class="token operator">=</span> xScale<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xScale <span class="token operator">></span> yScale<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    scale <span class="token operator">=</span> yScale<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 字体缩放</span>  g2d<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">.</span><span class="token function">deriveFont</span><span class="token punctuation">(</span><span class="token class-name">AffineTransform</span><span class="token punctuation">.</span><span class="token function">getScaleInstance</span><span class="token punctuation">(</span>scale<span class="token punctuation">,</span> scale<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"textWidth: &#123;&#125;, image width: &#123;&#125;, will scale now, scale: &#123;&#125;"</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>textWidth<span class="token punctuation">,</span> width<span class="token punctuation">,</span> scale<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  fm <span class="token operator">=</span> g2d<span class="token punctuation">.</span><span class="token function">getFontMetrics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>g2d<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token punctuation">(</span>width <span class="token operator">-</span> textWidth<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">,</span> fm<span class="token punctuation">.</span><span class="token function">getAscent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>height <span class="token operator">-</span> fm<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g2d<span class="token punctuation">.</span><span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm的镜像替换成淘宝</title>
      <link href="/2021/07/24/npm-mirror-change-to-taobao/"/>
      <url>/2021/07/24/npm-mirror-change-to-taobao/</url>
      
        <content type="html"><![CDATA[<blockquote><p>由于科学上网的缘故，在国内直接使用<code>npm</code>的官方镜像是非常慢的，因此这里推荐使用淘宝 NPM 镜像。</p></blockquote><h2 id="查询当前镜像"><a href="#查询当前镜像" class="headerlink" title="查询当前镜像"></a>查询当前镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> get registry <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下会返回<a href="https://registry.npmjs.org/">https://registry.npmjs.org/</a></p><h2 id="修改到淘宝镜像"><a href="#修改到淘宝镜像" class="headerlink" title="修改到淘宝镜像"></a>修改到淘宝镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry http://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改之后可以发现速度开始蹭蹭蹭飞快。</p><h2 id="修改到默认镜像"><a href="#修改到默认镜像" class="headerlink" title="修改到默认镜像"></a>修改到默认镜像</h2><p>如果切换之后还想反悔，通过以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名解析详解</title>
      <link href="/2021/07/24/domain-analysis-detail/"/>
      <url>/2021/07/24/domain-analysis-detail/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是域名资源记录？"><a href="#什么是域名资源记录？" class="headerlink" title="什么是域名资源记录？"></a>什么是域名资源记录？</h2><p>域名服务器是根据资源记录来对DNS请求进行应答的。在DNS系统中，最常见的资源记录是<code>Internet</code>类记录，资源记录是一个包含了下列字段的4元组：Name、Value、Type、TTL。分别如下：</p><ul><li><code>Name</code>：代表主机记录，例如<code>www.zzq0324.cn</code>，则对应的<code>Name</code>是<code>www</code>；</li><li><code>Type</code>：<code>Internet</code>类资源记录主要分为以下几种类型：A/CNAME/TXT/NS/MX/SRV/CAA/显性URL/隐性URL;</li><li><code>Value</code>：它的值取决于Type，例如如果类型是<code>A</code>，则<code>Value</code>是对应的IP；如果是<code>CNAME</code>，则对应的值为域名。</li><li><code>TTL</code>：该域名记录的生存时间，它决定了资源记录应当从缓存中删除的时间；</li></ul><p>其中<code>TTL</code>比较好理解，以下将不再详细介绍。</p><h2 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h2><p>以下将以<code>zzq0324.cn</code>为例进行举例说明：</p><ul><li>主机名为<code>www</code>：代表解析后域名为<code>www.zzq0324.cn</code>；</li><li>主机名为<code>@</code>：代表解析后域名为<code>zzq0324.cn</code>（直接解析为一级域名）；</li><li>主机名为<code>test</code>：代表解析后域名为<code>test.zzq0324.cn</code>；</li><li>主机名为<code>*</code>：代表泛解析，解析后域名为<code>*.zzq0324.cn</code>，所以二级域名的解析都会匹配上该泛解析。一般来说，如果有更具体的主机记录，会优先匹配。例如同时配置了主机记录<code>www.zzq0324.cn</code>和<code>*.zzq0324.cn</code>，则会优先使用<code>www.zzq0324.cn</code>的解析值。</li></ul><h2 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h2><h3 id="A记录类型"><a href="#A记录类型" class="headerlink" title="A记录类型"></a>A记录类型</h3><p><code>A</code>记录类型将域名指向一个IPV4地址，对应的<code>Value</code>即是IPV4地址。如果需要将域名指向一个IP地址，就需要添加A记录。<br><img src="https://static.zzq0324.cn/FvPS1uhWfdLIKhElIu9pAytMUi9u" alt="A记录解析"></p><h3 id="CNAME记录类型"><a href="#CNAME记录类型" class="headerlink" title="CNAME记录类型"></a>CNAME记录类型</h3><p><code>CNAME</code>记录类型有点像问路的逻辑：</p><blockquote><p>A问B：您好，请问去xxx的路怎么走？<br>B回答A：我不知道具体怎么走，但是我知道C知道怎么走？<br>A回B：好的，谢谢，那我问下C；<br>A问C：您好，请问去xxx的路怎么走？<br>C回答A：您好，去xxx的路应该这么走……</p></blockquote><p><strong>参考标准</strong>： 有效字符除字母、数字、“-”（中横杠）、还包括“_”(下划线)；RR值不允许为空（即@）；允许含有下划线。</p><p><img src="https://static.zzq0324.cn/Fm-gX3TiCqwDZeotqZ_4jwSNwUja" alt="CNAME记录解析"></p><h3 id="TXT记录解析"><a href="#TXT记录解析" class="headerlink" title="TXT记录解析"></a>TXT记录解析</h3><p>TXT记录的<code>Value</code>可以填写任何东西，长度限制255。绝大多数的TXT记录是用来做SPF记录（反垃圾邮件）。字符串；长度小于512,合法字符：大小写字母，数字,空格，及以下字符：-~=:;/.@+^!*</p><p><strong>参考标准</strong>： 另外，有效字符除字母、数字、“-”（中横杠）、还包括“_”(下划线)；RR值可为空，即@解析；允许含有下划线；不支持泛解析。<br><img src="https://static.zzq0324.cn/Firvrl9TVGZdrFs51vEvP5Fr65jx" alt="TXT记录解析"></p><h3 id="NS记录解析"><a href="#NS记录解析" class="headerlink" title="NS记录解析"></a>NS记录解析</h3><p>NS记录即域名服务器记录，如果需要把子域名交给其他DNS服务商解析，就需要添加NS记录。<br>NS记录用来表明由哪台服务器对该域名进行解析。注册域名时，总有默认的DNS服务器，每个注册的域名都是由一个DNS域名服务器来进行解析的。</p><p><img src="https://static.zzq0324.cn/Foh0y1x3c2NIO8xqt0UPKm9zCsIY" alt="NS记录新增"></p><h3 id="AAAA记录解析"><a href="#AAAA记录解析" class="headerlink" title="AAAA记录解析"></a>AAAA记录解析</h3><p>与A记录解析对应，AAAA记录解析针对IPV6地址解析使用。<br><img src="https://static.zzq0324.cn/FrZKaRBH0Nf6_Acu-oUw5VlWXY4_" alt="AAAA记录新增"></p><h3 id="MX记录解析"><a href="#MX记录解析" class="headerlink" title="MX记录解析"></a>MX记录解析</h3><p>MX记录将邮件指向域名服务器地址</p><p><img src="https://static.zzq0324.cn/FgxCVfiRRiA0og7HhWsLolpOFCZ_" alt="MX记录解析"></p><h3 id="显性URL"><a href="#显性URL" class="headerlink" title="显性URL"></a>显性URL</h3><p>从一个地址301重定向到另一个地址的时候，就需要添加显性URL记录（注：DNSPod目前只支持301重定向）。</p><h3 id="隐性URL"><a href="#隐性URL" class="headerlink" title="隐性URL"></a>隐性URL</h3><p>隐性URL类似于显性URL，区别在于隐性URL不会改变地址栏中的域名。</p><p>隐性URL和显性URL的区别：显性url更类似于跳转，即a.com解析到b.com,也就是访问a.com他会跳转到b.com,就是直接的跳转；而隐性url则是，访问a.com,实际显示内容是b.com的，但是地址还是a.com。</p>]]></content>
      
      
      <categories>
          
          <category> 云服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Flag使用说明</title>
      <link href="/2021/07/24/feature-flag-user-reference/"/>
      <url>/2021/07/24/feature-flag-user-reference/</url>
      
        <content type="html"><![CDATA[<blockquote><p>日常应用中一般会使用配置中心，<code>feature-flag</code>结合配置中心可以很好的实现灰度信息的热更新，达到修改好立马生效的效果，配置中心一般使用<code>Nacos</code>或者<code>Apollo</code>。</p></blockquote><h2 id="增加feature-flag的依赖"><a href="#增加feature-flag的依赖" class="headerlink" title="增加feature-flag的依赖"></a>增加<code>feature-flag</code>的依赖</h2><p><code>pom.xml</code>增加以下依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cn.zzq0324<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>feature-flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h2><p>项目配置中增加以下配置信息：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 灰度开关描述</span><span class="token attr-name">flags.$flagName.desc</span><span class="token punctuation">=</span><span class="token attr-value">控制xxx是否开启</span><span class="token comment"># 灰度开始时间，留空默认不限制开始时间</span><span class="token attr-name">flags.$flagName.startTime</span><span class="token punctuation">=</span><span class="token attr-value">2021-06-12 01:02:03</span><span class="token comment"># 灰度结束时间，留空默认不限制开始时间</span><span class="token attr-name">flags.$flagName.endTime</span><span class="token punctuation">=</span><span class="token comment"># 灰度白名单，允许为空</span><span class="token attr-name">flags.$flagName.whiteList</span><span class="token punctuation">=</span><span class="token attr-value">u1,u2,u3</span><span class="token comment"># 灰度黑名单，允许为空</span><span class="token attr-name">flags.$flagName.blackList</span><span class="token punctuation">=</span><span class="token comment"># 灰度比例</span><span class="token attr-name">flags.$flagName.launchPercent</span><span class="token punctuation">=</span><span class="token attr-value">95</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的配置中，<code>$flagName</code>可以替换成自己的灰度名称，例如<code>enable-open-search</code>。为保证规范性，名称尽量以<code>enable-</code>开头，便于管理。</p><blockquote><p>如果配置是基于配置中心（例如<code>Nacos</code>或者<code>Apollo</code>），则修改后灰度的值会自动热更新，达到随时开启的效果。</p></blockquote><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="场景一：同个业务id严格控制每次执行结果一致"><a href="#场景一：同个业务id严格控制每次执行结果一致" class="headerlink" title="场景一：同个业务id严格控制每次执行结果一致"></a>场景一：同个业务id严格控制每次执行结果一致</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FeatureFlagHelper</span><span class="token punctuation">.</span><span class="token function">isFeatureOn</span><span class="token punctuation">(</span><span class="token string">"$flagName"</span><span class="token punctuation">,</span> <span class="token string">"$bizId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="场景二：控制流量整体趋势符合灰度比例，同个业务id执行结果不要求强一致"><a href="#场景二：控制流量整体趋势符合灰度比例，同个业务id执行结果不要求强一致" class="headerlink" title="场景二：控制流量整体趋势符合灰度比例，同个业务id执行结果不要求强一致"></a>场景二：控制流量整体趋势符合灰度比例，同个业务id执行结果不要求强一致</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">FeatureFlagHelper</span><span class="token punctuation">.</span><span class="token function">isFeatureOn</span><span class="token punctuation">(</span><span class="token string">"$flagName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="场景三：获取灰度实例并根据扩展信息做额外的逻辑处理"><a href="#场景三：获取灰度实例并根据扩展信息做额外的逻辑处理" class="headerlink" title="场景三：获取灰度实例并根据扩展信息做额外的逻辑处理"></a>场景三：获取灰度实例并根据扩展信息做额外的逻辑处理</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 获取灰度实例</span><span class="token class-name">FeatureFlagInstance</span> instance <span class="token operator">=</span> <span class="token class-name">FeatureFlagHelper</span><span class="token punctuation">.</span><span class="token function">getFeatureFlagInstance</span><span class="token punctuation">(</span><span class="token string">"$flagName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取扩展信息</span><span class="token class-name">String</span> extra <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">getExtra</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">FeatureFlagHelper</span><span class="token punctuation">.</span><span class="token function">isFeatureOn</span><span class="token punctuation">(</span><span class="token string">"$flagName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 处理业务逻辑</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Feature-Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Flag代码实现</title>
      <link href="/2021/07/24/feature-java-code-analysis/"/>
      <url>/2021/07/24/feature-java-code-analysis/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文介绍Feature Flag的代码实现及其具体细节。</p></blockquote><h2 id="框架设计"><a href="#框架设计" class="headerlink" title="框架设计"></a>框架设计</h2><p><img src="https://static.zzq0324.cn/FonoLGPTxqhD40yj2656fBPBIiR5" alt="灰度框架设计"></p><p>关于算法逻辑详见<a href="https://www.zzq0324.cn/2021/07/24/feature-flag-algorithm-design/">《Feature Flag灰度算法设计》</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="代码动态编译"><a href="#代码动态编译" class="headerlink" title="代码动态编译"></a>代码动态编译</h3><p>使用<code>arthas-memorycompiler</code>实现源码的动态编译，实现运行中动态编译灰度实例的效果，详细信息查看<a href="https://www.zzq0324.cn/2021/07/16/arthas-dynamic-compiler/">《Arthas实现动态编译》</a></p><h3 id="灰度实例懒加载"><a href="#灰度实例懒加载" class="headerlink" title="灰度实例懒加载"></a>灰度实例懒加载</h3><p>考虑到多个应用会同时配置灰度信息，如果应用都需要定义一个灰度实例的类将很麻烦，因此在设计的时候就在考虑如何更简单让业务接入，例如只要通过静态方法就可以直接使用，而不用额外的编码工作。通过一番思考，最终决定通过动态编译的方式，在使用的时候如果对应<code>$flagName</code>的灰度实例还未生成，就先编译类并生成实例注册到<code>Spring</code>容器；如果已生成，则直接使用判断是否开启新特性。</p><p>对应的代码实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zzq0324<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>flag</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>zzq0324<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>flag<span class="token punctuation">.</span>spring<span class="token punctuation">.</span></span><span class="token class-name">SpringContextHolder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">cn<span class="token punctuation">.</span>zzq0324<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>flag<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">JdkCompiler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Preconditions</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ClassPathResource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StreamUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>charset<span class="token punctuation">.</span></span><span class="token class-name">Charset</span><span class="token punctuation">;</span><span class="token comment">/** * description: feature flag实例生成器 &lt;br> * date: 2021/6/11 12:55 下午 &lt;br> * author: zzq0324 &lt;br> * version: 1.0 &lt;br> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeatureFlagInstanceRegister</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">FeatureFlagInstanceRegister</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 模板类路径</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> FEATURE_FLAG_TPL_PATH <span class="token operator">=</span> <span class="token string">"generator/FeatureFlagInstance.tpl"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 如果flag对应的bean不存在，则生成     *     * @param flagName flag名称     * @return 返回开关实例对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">FeatureFlagInstance</span> <span class="token function">registerIfNotExist</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isContainsBean</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token function">dynamicLoadClassAndRegisterBean</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"dynamicLoadClassAndRegisterBean error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">FeatureFlagInstance</span> instance <span class="token operator">=</span> <span class="token function">getInstanceFromSpringContext</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 动态生成FeatureFlag类并注册成Spring Bean     *     * @param flagName 开关名称     */</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dynamicLoadClassAndRegisterBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 二次确认，避免并发下重复生成导致可能的冲突或者报错</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isContainsBean</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 编译并加载class</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">FeatureFlagInstance</span><span class="token punctuation">></span></span> beanType <span class="token operator">=</span> <span class="token function">compileAndLoadClass</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册Bean到Spring</span>        <span class="token function">registerBean</span><span class="token punctuation">(</span>flagName<span class="token punctuation">,</span> beanType<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"register bean for flag: &#123;&#125; successfully."</span><span class="token punctuation">,</span> flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">FeatureFlagInstance</span><span class="token punctuation">></span></span> <span class="token function">compileAndLoadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">)</span>        <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 获取模板内容</span>        <span class="token class-name">String</span> sourceTemplate <span class="token operator">=</span> <span class="token function">loadSourceTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> <span class="token function">flagNameToClassName</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 替换模板变量</span>        <span class="token class-name">String</span> source <span class="token operator">=</span> sourceTemplate<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"$flagName"</span><span class="token punctuation">,</span> flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        source <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"$className"</span><span class="token punctuation">,</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"flag: &#123;&#125; source as follow: \n&#123;&#125;"</span><span class="token punctuation">,</span> flagName<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 动态编译</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">FeatureFlagInstance</span><span class="token punctuation">></span></span> beanType <span class="token operator">=</span>            <span class="token class-name">JdkCompiler</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">FeatureFlagInstance</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"compile and load class[&#123;&#125;] for flag: &#123;&#125; successfully."</span><span class="token punctuation">,</span> beanType<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">FeatureFlagInstance</span><span class="token punctuation">></span></span> beanType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ConfigurableApplicationContext</span> applicationContext <span class="token operator">=</span>            <span class="token punctuation">(</span><span class="token class-name">ConfigurableApplicationContext</span><span class="token punctuation">)</span><span class="token class-name">SpringContextHolder</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanDefinitionRegistry</span> beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span><span class="token punctuation">)</span>applicationContext<span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 注册Bean</span>        <span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>beanType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置构造器参数</span>        beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>flagName<span class="token punctuation">,</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">loadSourceTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPathResource</span> classPathResource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>FEATURE_FLAG_TPL_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> classPathResource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">StreamUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 将特性开关名称转为类名，将横杠转为下划线     *     * @param flagName 开关名称     * @return 返回类名     */</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">flagNameToClassName</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        flagName <span class="token operator">=</span> flagName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flagName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">FeatureFlagInstance</span> <span class="token function">getInstanceFromSpringContext</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SpringContextHolder</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>flagName<span class="token punctuation">,</span> <span class="token class-name">FeatureFlagInstance</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isContainsBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> flagName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SpringContextHolder</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>flagName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="灰度判断逻辑"><a href="#灰度判断逻辑" class="headerlink" title="灰度判断逻辑"></a>灰度判断逻辑</h3><p>灰度判断逻辑核心实现如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 判断业务id是否在灰度范围内，通过bizId计算hash值** @param bizId 业务id，根据业务的具体场景设置，例如可以是用户id、员工id、城市等* @return 返回是否灰度*/</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFeatureOn</span><span class="token punctuation">(</span><span class="token class-name">String</span> bizId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断是否在灰度时间段，不在灰度时间段直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isInTimeSection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断是否在黑名单</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInBlackList</span><span class="token punctuation">(</span>bizId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断是否在白名单</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInWhiteList</span><span class="token punctuation">(</span>bizId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断比例，如果为0代表还未灰度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getLaunchPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 灰度100%</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getLaunchPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 业务id为空，由于无法计算hash值，采用随机算法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bizId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hash <span class="token operator">=</span> <span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        hash <span class="token operator">=</span> <span class="token function">seededHash</span><span class="token punctuation">(</span>bizId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断是否小于灰度比例，是的话直接返回</span>    <span class="token keyword">return</span> hash <span class="token operator">&lt;</span> <span class="token function">getLaunchPercent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整类详见<a href="https://github.com/zzq0324/feature-flag/blob/main/src/main/java/cn/zzq0324/feature/flag/FeatureFlagInstance.java">FeatureFlagInstance.java</a></p><p>完整实现详见<a href="https://github.com/zzq0324/feature-flag">Github</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://mp.weixin.qq.com/s/sCWQGU_OWiQkDUuSPXvw-w">为什么Java String哈希乘数为31？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Feature-Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Flag灰度算法设计</title>
      <link href="/2021/07/24/feature-flag-algorithm-design/"/>
      <url>/2021/07/24/feature-flag-algorithm-design/</url>
      
        <content type="html"><![CDATA[<h2 id="如何判断算法好不好"><a href="#如何判断算法好不好" class="headerlink" title="如何判断算法好不好"></a>如何判断算法好不好</h2><ul><li><code>保证离散</code>：确保灰度的范围是离散的，例如如果灰度对象是用户，那么每个年份的用户都可以灰度到最好；针对不同的flag，每次灰度的范围也应该离散，例如flag A和flag B的灰度范围应该不一样；</li><li><code>保证一致</code>：在灰度信息不变的情况下，针对同样的业务id每次的灰度结果都能保持一致；</li></ul><h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><p>灰度的场景有以下两种：</p><ul><li><strong>场景一：从整体上保障既定比例的流量灰度即可，针对同个业务id的请求（例如同个userId），不保证一定都是灰度或者都是不灰度；</strong><ul><li>后端存储优化，需要控制1%的流量先使用新的接口；</li><li>……</li></ul></li><li><strong>场景二：需要保障同一个业务id每次的灰度结果是一致的，即针对同样的业务id，要么全灰度、要么全不灰度</strong><ul><li>A/B测试；</li><li>用户端新增功能，需要小部分用户先体验，不可能有时候出现新功能，有时候不出现。应该确保灰度的用户都出现新功能；</li><li>……</li></ul></li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><p>基于以上场景，算法如下：</p><h3 id="随机算法-针对场景一"><a href="#随机算法-针对场景一" class="headerlink" title="随机算法(针对场景一)"></a>随机算法(针对场景一)</h3><p>生成100以内的随机数，根据生成的随机数进行判断，小于灰度比例则开启灰度，否则不开启。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ThreadLocalRandom</span><span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一致性算法-针对场景二"><a href="#一致性算法-针对场景二" class="headerlink" title="一致性算法(针对场景二)"></a>一致性算法(针对场景二)</h3><ul><li>根据flagName计算种子(确保每次的灰度，可以灰度到不同的群体)；</li><li>根据bizId+flagName计算hash（小于100），保证同个业务id每次的执行结果都一致；</li><li>根据生成的随机数进行判断，小于灰度比例则开启灰度，否则不开启。</li></ul><p>具体代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 根据业务id和flagName计算hash值** @param bizId 业务id* @return 返回计算后小于等于100的哈希值*/</span><span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">seededHash</span><span class="token punctuation">(</span><span class="token class-name">String</span> bizId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// FNV算法，根据flagName生成种子，确保不同的flag可以灰度到不同范围的群体</span>    <span class="token keyword">long</span> seed <span class="token operator">=</span> FNV<span class="token punctuation">.</span><span class="token function">fnv1a_32</span><span class="token punctuation">(</span><span class="token function">getFlagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> h <span class="token operator">=</span> seed <span class="token operator">%</span> <span class="token number">100L</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> bizId<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0xFF</span> <span class="token operator">&amp;</span> bytes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 为什么乘以31？因此31在JVM内部做过优化，通过位异5位-1完成，比较高效</span>    h <span class="token operator">=</span> <span class="token punctuation">(</span>h <span class="token operator">*</span> <span class="token number">31L</span> <span class="token operator">+</span> t<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100L</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> h<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://blog.csdn.net/hustfoxy/article/details/23687239">FNV哈希算法</a></li><li><a href="https://github.com/Killeroid/JavaFNV">JavaFNV</a></li><li><a href="https://en.wikipedia.org/wiki/Fowler%E2%80%93Noll%E2%80%93Vo_hash_function">Fowler–Noll–Vo hash function</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Feature-Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Feature Flag介绍</title>
      <link href="/2021/07/24/feature-flag-intruduction/"/>
      <url>/2021/07/24/feature-flag-intruduction/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“防范预防胜于救灾，安全生产重于泰山”。安全生产对于企业来说是至关重要的，从IT的角度，如何通过技术手段保障安全，显得尤为重要。</p></blockquote><h2 id="什么是Feature-Flag"><a href="#什么是Feature-Flag" class="headerlink" title="什么是Feature Flag"></a>什么是Feature Flag</h2><blockquote><p>Feature Flag(又名 Feature Toggle、Flip等)是一种允许控制线上功能开启或者关闭的方式，通常会采取配置文件的方式来控制。</p></blockquote><h2 id="引入Feature-Flag的优势"><a href="#引入Feature-Flag的优势" class="headerlink" title="引入Feature Flag的优势"></a>引入Feature Flag的优势</h2><ul><li>增强持续部署的信心；</li><li>A/B testing 支持；</li><li>特性开放范围控制，有效验证线上新特性功能，针对特定人群发布功能尽早获得反馈，减少线上问题影响范围；</li><li>可作为限流、降级之外有效的应急预案；</li><li>能线上开启或者关闭,实现快速回滚。</li></ul><p>通过Feature Flag保证了功能开关的灵活性，如果遇到突发情况或者重大Bug，可以通过开关的方式及时关闭新特性，避免对业务应用带来影响。</p><h2 id="Feature-Flag声明周期"><a href="#Feature-Flag声明周期" class="headerlink" title="Feature Flag声明周期"></a>Feature Flag声明周期</h2><p><img src="https://static.zzq0324.cn/FiXJmWPx4ODNa3m4w50x5P8FtCDU" alt="生命周期"></p>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Feature-Flag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云数据追踪</title>
      <link href="/2021/07/24/aliyun-data-tracking/"/>
      <url>/2021/07/24/aliyun-data-tracking/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开发过程中或者项目上线后，遇到问题的时候经常需要回溯下数据是怎么变更的，特别是日志做的不够好的应用。下面一起来了解下阿里云的数据追踪功能。</p></blockquote><h2 id="数据追踪能解决什么问题？"><a href="#数据追踪能解决什么问题？" class="headerlink" title="数据追踪能解决什么问题？"></a>数据追踪能解决什么问题？</h2><ul><li>在线搜索日志内容，无需手工下载Binlog；</li><li>支持数据的插入/更新/删除日志搜索，无需手工解析Binlog；</li><li>支持逐条数据恢复，无需手工生成回滚语句。</li></ul><h2 id="数据追踪支持哪些数据库？"><a href="#数据追踪支持哪些数据库？" class="headerlink" title="数据追踪支持哪些数据库？"></a>数据追踪支持哪些数据库？</h2><ul><li><code>RDS MySQL</code></li><li><code>PolarDB MySQL</code></li></ul><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><ul><li>访问<a href="https://dms.aliyun.com/">阿里云DMS</a>后台</li><li>进入”全部功能” -&gt; “数据追踪”<br><img src="https://static.zzq0324.cn/Fpi_Yb5_mtGWTfpIp264qtYER-cJ" alt="数据追踪入口"></li><li>创建数据追踪<br><img src="https://static.zzq0324.cn/FlRwXPpe1x9i8Kx4-NbtXTcT-G40" alt="新增数据追踪"><br><img src="https://static.zzq0324.cn/FldG5vOxHVYBFw4w342bsiX6xac6" alt="追踪信息填写"><br>填写完成后提交申请即可，系统会自动下载log并解析，只要耐心等待解析即可。<br><img src="https://static.zzq0324.cn/FuDJM4RKE9YQFHcl2d9xCAfTIk-F" alt="阿里云解析处理中"></li><li>系统处理完成后，可以在<code>日志搜索</code>的部分直接用对应的字段<br><img src="https://static.zzq0324.cn/FtsRQsM6XZ-GH9ho-m-HUgsaDMai" alt="记录搜索"></li><li>打开详情查看变更信息，有变更的字段会标注红色<br><img src="https://static.zzq0324.cn/Fv5F7bq--NtFLH9rMfA1Laz-VUvr" alt="变更详情"></li></ul><p>通过该功能可以很方便的对历史数据进行追溯，不过该功能也有时间限制，一般是2~3个月。如果要追溯更久之前的数据，还是得自己记录日志信息。</p>]]></content>
      
      
      <categories>
          
          <category> 云服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么不少同学上班期间不喜欢戴工牌？</title>
      <link href="/2021/07/21/why-colleagues-does-not-like-work-card/"/>
      <url>/2021/07/21/why-colleagues-does-not-like-work-card/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每个公司都有自己的企业文化，也都有自己的规章制度，只要在这个集体，在这个组织，就得按规章制度办事。</p></blockquote><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司推行校园文化，有统一的校服、校园卡（即工牌，以下同）。按照要求，每周一大家必须要穿校服、戴校园卡，其他时间没强制穿校服但是要佩戴好校园卡。</p><p>根据一段时间执行下来的结果看，还是经常性会有同学会忘记穿校服或者佩戴校园卡，其中校园卡忘佩戴的居多。我开始反思，为什么大家明明都知道每周一下午会有检查，还是没法按规章制度、按纪律执行好？</p><h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><blockquote><p>芒格说：“如果我知道我会死在哪里，那我就永远不会去那个地方”。</p></blockquote><p>所以我很无法理解，明明都知道会检查，为什么还是继续不断的在犯错？明明是一个规章制度，大家平时都要配到校园卡，但是大家都无法很好的执行，甚至于很少有人执行？这是为什么？</p><p>经常性会看到周一下午，当检查的同学过来之后，大家慌慌张张的佩戴起校园卡，应付检查。等检查过去，可能又悄悄摘下了工牌……</p><p>这一幕有点像小时候上学，老师交代大家要背诵课文，下一节课会抽查一样，还是会有同学不会背诵，然后等上课的时候又胆战心惊，希望老师不要抽到自己。但往往这时候表情就会自然流露，然后像中奖一样被抽中，然后出丑。</p><h2 id="意见收集"><a href="#意见收集" class="headerlink" title="意见收集"></a>意见收集</h2><p>出于好奇心，也基于管理需要，我向部门内的同学收集了不佩戴校园卡的原因，整理如下：</p><ul><li>80% 的同学反馈工牌较重，低头工作工作的时候晃来晃去，容易撞到电脑屏幕或其他的东西，比较不方便；</li><li>10%左右的同学反馈公司没规定（可能没宣导共识到位）；</li><li>10%左右的同学反馈每天佩戴，是进入工作状态的一种表现。</li></ul><p>收集之后我发现整体基本符合现状，能够坚持每天佩戴的可能10%左右的同学。我觉得有必要跟相关部门的同学反馈下，是否可以针对性的做一些改进，让大家能够更愿意佩戴校园卡。</p><p>如果公司收到建议后也改进了，但是我们的佩戴率还是不高，就说明我们的执行力出了问题。</p><h2 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h2><p>”无规矩不成方圆“，纪律就是纪律，该坚持就得坚持，不能流于形式。公司做的不好的我们可以给公司反馈建议。</p><p>”小行为、大力量“，小行为坚持久了，就会形成力量。优秀不是一种行为，而是一种习惯！</p>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 企业文化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标管理九字箴言</title>
      <link href="/2021/07/21/goal-based-theory/"/>
      <url>/2021/07/21/goal-based-theory/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在职场中，相信大家都会为自己或者团队设定短期、中期以及长期目标。如何设定目标？目标设定后，用什么样的方式去管理？怎么更好的去落地？有没有什么方法论能够很好的支撑？相信大家都会遇到这样的问题，本文将为您介绍九字箴言，通过一定的套路来对目标做管理。</p></blockquote><p>先跟大家介绍下九字箴言：定目标、建班子、抓落实。很多的事情都可以按照这个模式，先共识目标，再根据班子成立对应的班子，然后再进行落实。以下将分别详细展开。</p><h2 id="定目标"><a href="#定目标" class="headerlink" title="定目标"></a>定目标</h2><p>目标决定了整个组织、整个团队的方向，是最高共识。只有确定了目标，才能让大家起头并进，为同一个目标努力，后续的分工协作也才能按照好的方向发展。</p><p>如果没有统一目标，那么可以想想后续的分工协作一定是无序、杂乱的，并且会非常低效，容易“内卷”。</p><p>因此，<strong>定目标</strong> 是首要任务，好的目标事半功倍。</p><h2 id="建班子"><a href="#建班子" class="headerlink" title="建班子"></a>建班子</h2><p>有了目标之后，我们应该思考用什么样的班子来完成这个目标，不同的目标对应的班子应当是不同的。要很好的实现目标，班子显得尤为重要。</p><p>班子本质就是组织架构，组织架构决定了权责，有什么样的决策权、有什么样的职责都应该有清晰明确的约定。当这些内容都被明确写入组织架构后，后续的分工协作也将变得简单，什么事情由谁主导、由谁协作，关系就会清晰很多。</p><p>班子一方面确定了执行人的范围，另一方面也很好的梳理了各个团队、各个人员之间分工协作的关系。</p><h2 id="抓落实"><a href="#抓落实" class="headerlink" title="抓落实"></a>抓落实</h2><p>人员明确后，对应的需要根据目标和班子拆解计划，哪个人、在什么时间点应该完成什么样的事情，都应该被拆解并且明确。</p><p>对于个体而言，拆解有利于目标的清晰和执行；对应组织而言，拆解后会让整个目标的执行更加好管理，更加可控，避免整个目标的执行失控。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p><code>定目标、建班子、抓落实</code>非常受用，简单通俗的9个字蕴藏着丰富的管理哲学，是管理的一个精炼和总结！</p>]]></content>
      
      
      <categories>
          
          <category> 管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标 </tag>
            
            <tag> 组织 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jar包发布到Maven中央仓库流程</title>
      <link href="/2021/07/18/jar-deploy-to-maven-central-flow/"/>
      <url>/2021/07/18/jar-deploy-to-maven-central-flow/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Maven中央仓库并不支持直接发布 jar 包，需要将 jar 包发布到一些指定的第三方Maven仓库，然后该仓库再将 jar 包同步到 Maven中央仓库，Sonatype便是 Maven中央仓库指定的暂存库。</p></blockquote><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>本文将介绍Jar包发布到Maven中央仓库的主要流程，流程整理如下：</p><p><img src="https://static.zzq0324.cn/FqCQN5TNbMAsEMwGkJ0Xus5KvVmS" alt="发布流程"></p><h2 id="详细说明"><a href="#详细说明" class="headerlink" title="详细说明"></a>详细说明</h2><p>详细请看另外两篇博客：</p><ul><li><a href="https://www.zzq0324.cn/2021/07/16/how-to-deploy-jar-to-maven-central-part1/">(一)Jar包发布到Maven中央仓库之域名认证</a></li><li><a href="https://www.zzq0324.cn/2021/07/16/how-to-deploy-jar-to-maven-central-part2/">(二)Jar包发布到Maven中央仓库之发布</a></li></ul><p><strong>需要说明的是，发布到<code>s01.oss.sonatype.org</code>之后，大概30分钟内会自动同步到中央仓库。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Sonatype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于vercel搭建个人博客</title>
      <link href="/2021/07/18/deploy-blog-by-vercel/"/>
      <url>/2021/07/18/deploy-blog-by-vercel/</url>
      
        <content type="html"><![CDATA[<blockquote><p>使用<code>Hexo</code>搭配<code>Pages</code>服务来搭建自己的博客网站，就不需要花额外的钱购买服务器来部署博客了。目前市面上比较流行的，国外是<code>Github Pages</code>，国内是<code>Gitee Pages</code>，前者支持自定义域名，后者自定义域名需要付费(99元/年)，但是后者优势也比较明显，就是国内的访问速度比较快，大家可以根据自己的需要进行选择。本文将为大家介绍如何通过其他服务零成本提高在国内的访问速度。</p></blockquote><p>如何做到让博客秒开？当前博客就是通过<code>Vercel</code>来搭建的，整体打开速度还算不错，今天为大家推荐<code>Vercel</code>。</p><h2 id="什么是Vercel？"><a href="#什么是Vercel？" class="headerlink" title="什么是Vercel？"></a>什么是Vercel？</h2><p><code>Vercel</code>是一个非常好用的网站托管服务，支持几十种模板语言的部署，例如<code>Vue</code>、<code>Hexo</code>、<code>React</code>等，开箱即用。在国内访问很快，更重要的是不要钱！！！</p><h2 id="Vercel账号注册及Hexo部署"><a href="#Vercel账号注册及Hexo部署" class="headerlink" title="Vercel账号注册及Hexo部署"></a>Vercel账号注册及Hexo部署</h2><h3 id="账号注册、导入与部署"><a href="#账号注册、导入与部署" class="headerlink" title="账号注册、导入与部署"></a>账号注册、导入与部署</h3><ul><li>访问并登陆<a href="https://vercel.com/">Vercel</a>网站，推荐使用<code>Github</code>授权的方式登陆，如下图：<br><img src="https://static.zzq0324.cn/FmNy5Ga9g62eYu0uQcSOJOaD8XBf" alt="Github授权登陆"></li><li>授权登陆后选择导入<code>Github</code>项目<br><img src="https://static.zzq0324.cn/FpW98OI66xhV2ivmfburbzItLvJQ" alt="导入Github项目"></li><li>点击<code>Deploy</code>进行项目部署<br><img src="https://static.zzq0324.cn/FlKeliEWv074jovlDk_ZBGfhsweR" alt="部署"></li><li>构建完之后，可以在<code>Overview</code>菜单下，看到新建的项目,至此项目已经创建完成，可以通过vercel自动配置的子域名访问了<br><img src="https://static.zzq0324.cn/FpvcMtG4XDz0-J6o4nd4ne1cmn0w" alt="项目部署"></li></ul><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><ul><li>我们需要申请一个自己的域名，本网站的域名<code>zzq0324.cn</code>是在阿里云上购买并进行了ICP备案</li><li>点击卡片上的粗黑色的标题进入配置界面，该界面，有4个菜单，我们点击Settings-&gt;Domains，并在输入框中填入想设置的域名，点击Add按钮，并输入要绑定的域名</li><li>添加完之后登陆域名服务商后台，增加<code>CNAME</code>解析，解析到提供的对应的域名<code>cname.vercel-dns.com</code>，例如我的是：<br><img src="https://static.zzq0324.cn/FqF91UB4Q0Ws_LrNE0BciOT3M14o" alt="CNAME解析"><br><img src="https://static.zzq0324.cn/FpDXQI4Seub1POhnBhENf93liR3I" alt="添加域名"></li></ul><p>至此，部署完成。后续只要<code>Github</code>的代码有更新，<code>Vercel</code>就会自动进行构建并部署，非常便捷，省去了很多的工作量。</p><p><img src="https://static.zzq0324.cn/FrOnvePyxTD6enoKK4oSQK9jXnir" alt="代码推送后自动部署"></p>]]></content>
      
      
      <categories>
          
          <category> 云服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Vercel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo 2.7.12线程池关闭的Bug处理</title>
      <link href="/2021/07/16/dubbo-2.7.12-executor-closed-bug/"/>
      <url>/2021/07/16/dubbo-2.7.12-executor-closed-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://dubbo.apache.org/zh/">Apache Dubbo</a>是一款高性能、轻量级的开源 Java 服务框架，提供了六大核心能力：面向接口代理的高性能RPC调用，智能容错和负载均衡，服务自动注册和发现，高度可扩展能力，运行期流量调度，可视化的服务治理与运维。</p><p>简单介绍后，接下来跟大家分享下实际项目使用中出现的Dubbo线程池关闭导致业务无法正常响应的Bug。</p><h2 id="现象分析及解决方案"><a href="#现象分析及解决方案" class="headerlink" title="现象分析及解决方案"></a>现象分析及解决方案</h2><h3 id="环境信息"><a href="#环境信息" class="headerlink" title="环境信息"></a>环境信息</h3><pre class="line-numbers language-bshell" data-language="bshell"><code class="language-bshell">Dubbo version: 2.7.12Operating System version: centosJava version: 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h3><p><code>Dubbo</code>版本从2.7.7升级至2.7.12后，provider下线造成部分consumer线程池Terminated，继而请求无法正常响应，造成严重的产线事故。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>通过在开发环境模拟，发现在压测场景下（模拟产线不断处理业务）会出现该问题。出现的时候伴随日志信息如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">An</span> exception <span class="token string">'&#123;&#125;'</span> <span class="token punctuation">[</span>enable DEBUG level <span class="token keyword">for</span> full stacktrace<span class="token punctuation">]</span> was thrown by a user handler's <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token punctuation">)</span> method <span class="token keyword">while</span> handling the following exception<span class="token operator">:</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span></span>ExecutionException</span><span class="token operator">:</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>all<span class="token punctuation">.</span></span>AllChannelHandler</span> error when process received event <span class="token punctuation">.</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>all<span class="token punctuation">.</span></span>AllChannelHandler</span><span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">AllChannelHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">68</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>exchange<span class="token punctuation">.</span>support<span class="token punctuation">.</span>header<span class="token punctuation">.</span></span>HeartbeatHandler</span><span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">HeartbeatHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span>MultiMessageHandler</span><span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">MultiMessageHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">52</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span></span>AbstractPeer</span><span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">AbstractPeer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">147</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>netty4<span class="token punctuation">.</span></span>NettyClientHandler</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">NettyClientHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">83</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">362</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">340</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>timeout<span class="token punctuation">.</span></span>IdleStateHandler</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">IdleStateHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">286</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">362</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">340</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span></span>ByteToMessageDecoder</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token class-name">ByteToMessageDecoder</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">323</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>handler<span class="token punctuation">.</span>codec<span class="token punctuation">.</span></span>ByteToMessageDecoder</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ByteToMessageDecoder</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">297</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">362</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">340</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>DefaultChannelPipeline</span>$<span class="token class-name">HeadContext</span><span class="token punctuation">.</span><span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">DefaultChannelPipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1434</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">362</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>AbstractChannelHandlerContext</span><span class="token punctuation">.</span><span class="token function">invokeChannelRead</span><span class="token punctuation">(</span><span class="token class-name">AbstractChannelHandlerContext</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">348</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span></span>DefaultChannelPipeline</span><span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span><span class="token class-name">DefaultChannelPipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">965</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>AbstractNioByteChannel</span>$<span class="token class-name">NioByteUnsafe</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">AbstractNioByteChannel</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">163</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>NioEventLoop</span><span class="token punctuation">.</span><span class="token function">processSelectedKey</span><span class="token punctuation">(</span><span class="token class-name">NioEventLoop</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">648</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>NioEventLoop</span><span class="token punctuation">.</span><span class="token function">processSelectedKeysOptimized</span><span class="token punctuation">(</span><span class="token class-name">NioEventLoop</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">583</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>NioEventLoop</span><span class="token punctuation">.</span><span class="token function">processSelectedKeys</span><span class="token punctuation">(</span><span class="token class-name">NioEventLoop</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span>NioEventLoop</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">NioEventLoop</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">462</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>SingleThreadEventExecutor</span>$<span class="token number">5.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SingleThreadEventExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">897</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>FastThreadLocalRunnable</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">FastThreadLocalRunnable</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Thread</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span><span class="token class-name">Caused</span> by<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>RejectedExecutionException</span><span class="token operator">:</span> <span class="token class-name">Task</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span></span>ChannelEventRunnable</span><span class="token annotation punctuation">@7d7d66e4</span> rejected from <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token annotation punctuation">@15527cbc</span><span class="token punctuation">[</span><span class="token class-name">Terminated</span><span class="token punctuation">,</span> pool size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> active threads <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> queued tasks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> completed tasks <span class="token operator">=</span> <span class="token number">93</span><span class="token punctuation">]</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span>$<span class="token class-name">AbortPolicy</span><span class="token punctuation">.</span><span class="token function">rejectedExecution</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">2047</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">823</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ThreadPoolExecutor</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1369</span><span class="token punctuation">)</span>at <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>remoting<span class="token punctuation">.</span>transport<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>all<span class="token punctuation">.</span></span>AllChannelHandler</span><span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span><span class="token class-name">AllChannelHandler</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">28</span> common frames omitted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上信息看发现线程池被关闭了。联想到此次升级的目的，是为了解决Dubbo每个端口创建200个线程导致创建线程过多的问题（对于我们的网关而言会达到几千个），大胆猜测是升级后<code>Dubbo</code>的Bug导致的。因此到<code>GitHub</code>提交了<a href="https://github.com/apache/dubbo/issues/8172">Issue</a>。</p><p>很快，有Contributor进行了回应，确认在以下场景可以复现：<br><img src="https://static.zzq0324.cn/FqxLZee2Dq3YOQU9kz8v_O4QdIRA" alt="image.png"><br><img src="https://static.zzq0324.cn/FgwUQbvir8SnFbhXsDAQGMN9oMgN" alt="image.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>考虑到官方修复速度比较慢，我们基于<code>Dubbo</code>的<code>SPI</code>机制重新实现<code>ExecutorRepository</code>，在检测到线程池被关闭的情况下马上创建共享线程池，具体如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span>extern<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Slf4j</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtensionLoader</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>threadpool<span class="token punctuation">.</span></span><span class="token class-name">ThreadPool</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>threadpool<span class="token punctuation">.</span>manager<span class="token punctuation">.</span></span><span class="token class-name">ExecutorRepository</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>threadpool<span class="token punctuation">.</span>manager<span class="token punctuation">.</span></span><span class="token class-name">Ring</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">ExecutorUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>utils<span class="token punctuation">.</span></span><span class="token class-name">NamedThreadFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>dubbo<span class="token punctuation">.</span>common<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">CommonConstants</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment">/** * 升级dubbo版本到2.7.12 处理如下bug * https://github.com/apache/dubbo/pull/7109 * https://github.com/apache/dubbo/pull/6959 * &lt;p> * 但是造成服务蓝绿发布下线服务时候，dubbo全局线程池 被关闭，导致节点请求失败 问题 * https://github.com/apache/dubbo/issues/8172 * * 临时解决方案： * 基于全局线程池；线程池关闭后重新创建线程池； * * &lt;p> * copy from org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository * &lt;p> * Consider implementing &#123;@code Licycle&#125; to enable executors shutdown when the process stops. */</span><span class="token comment">/** * Consider implementing &#123;@code Licycle&#125; to enable executors shutdown when the process stops. */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomExecutorRepository</span> <span class="token keyword">implements</span> <span class="token class-name">ExecutorRepository</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> DEFAULT_SCHEDULER_SIZE <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> SHARED_EXECUTOR <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"DubboSharedHandler"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Ring</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ScheduledExecutorService</span><span class="token punctuation">></span></span> scheduledExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ring</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ScheduledExecutorService</span> serviceExporterExecutor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ConcurrentMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ConcurrentMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">></span><span class="token punctuation">></span></span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SisyphusExecutorRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> DEFAULT_SCHEDULER_SIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">ScheduledExecutorService</span> scheduler <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"Dubbo-framework-scheduler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scheduledExecutors<span class="token punctuation">.</span><span class="token function">addItem</span><span class="token punctuation">(</span>scheduler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        serviceExporterExecutor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NamedThreadFactory</span><span class="token punctuation">(</span><span class="token string">"Dubbo-exporter-scheduler"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * Get called when the server or client instance initiating.     *     * @param url     * @return     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">ExecutorService</span> <span class="token function">createExecutorIfAbsent</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">></span></span> executors <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>EXECUTOR_SERVICE_COMPONENT_KEY<span class="token punctuation">,</span> k <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//issue-7054:Consumer's executor is sharing globally, key=Integer.MAX_VALUE. Provider's executor is sharing by protocol.</span>        <span class="token class-name">String</span> consumerKey <span class="token operator">=</span> <span class="token function">getConsumerExecutorKey</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> portKey <span class="token operator">=</span> CONSUMER_SIDE<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>SIDE_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> consumerKey <span class="token operator">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> executors<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>portKey<span class="token punctuation">,</span> k <span class="token operator">-></span> <span class="token function">createExecutor</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// If executor has been shut down, create a new one</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            executors<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>portKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            executor <span class="token operator">=</span> <span class="token function">createExecutor</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            executors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>portKey<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ExecutorService</span> <span class="token function">getExecutor</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span><span class="token punctuation">></span></span> executors <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>EXECUTOR_SERVICE_COMPONENT_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * It's guaranteed that this method is called after &#123;@link #createExecutorIfAbsent(URL)&#125;, so data should already         * have Executor instances generated and stored.         */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executors <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"No available executors, this is not expected, framework should call createExecutorIfAbsent first "</span> <span class="token operator">+</span>                    <span class="token string">"before coming to here."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> consumerKey <span class="token operator">=</span> <span class="token function">getConsumerExecutorKey</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> portKey <span class="token operator">=</span> CONSUMER_SIDE<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>SIDE_KEY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> consumerKey <span class="token operator">:</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExecutorService</span> executor <span class="token operator">=</span> executors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>portKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 线程池关闭重新创建</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> executor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> executor<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> createStart <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            executor <span class="token operator">=</span> <span class="token function">createExecutorIfAbsent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">long</span> createEnd <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Executor for "</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">" is shutdown. recreate global executor, cost :&#123;&#125;"</span><span class="token punctuation">,</span> createEnd <span class="token operator">-</span> createStart<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateThreadpool</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">,</span> <span class="token class-name">ExecutorService</span> executor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">hasParameter</span><span class="token punctuation">(</span>THREADS_KEY<span class="token punctuation">)</span>                    <span class="token operator">&amp;&amp;</span> executor <span class="token keyword">instanceof</span> <span class="token class-name">ThreadPoolExecutor</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">)</span> executor<span class="token punctuation">;</span>                <span class="token keyword">int</span> threads <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>THREADS_KEY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> max <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> core <span class="token operator">=</span> threadPoolExecutor<span class="token punctuation">.</span><span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>threads <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>threads <span class="token operator">!=</span> max <span class="token operator">||</span> threads <span class="token operator">!=</span> core<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>threads <span class="token operator">&lt;</span> core<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>core <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                        threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setMaximumPoolSize</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>core <span class="token operator">==</span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            threadPoolExecutor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>threads<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">nextScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> scheduledExecutors<span class="token punctuation">.</span><span class="token function">pollItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ScheduledExecutorService</span> <span class="token function">getServiceExporterExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> serviceExporterExecutor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">ExecutorService</span> <span class="token function">getSharedExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"using shared executor"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> SHARED_EXECUTOR<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"destroy all"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>executors <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>executors <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                executors<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>executor <span class="token operator">-></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>executor<span class="token punctuation">.</span><span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token class-name">ExecutorUtil</span><span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"destroy all cost :"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> <span class="token function">createExecutor</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ExecutorService</span><span class="token punctuation">)</span> <span class="token class-name">ExtensionLoader</span><span class="token punctuation">.</span><span class="token function">getExtensionLoader</span><span class="token punctuation">(</span><span class="token class-name">ThreadPool</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptiveExtension</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExecutor</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getConsumerExecutorKey</span><span class="token punctuation">(</span><span class="token class-name">URL</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        return url.getIp() + "-" + url.getPort();</span>        <span class="token keyword">return</span> <span class="token string">"global"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>扩展后重新发版，问题得到了解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arthas实现动态编译</title>
      <link href="/2021/07/16/arthas-dynamic-compiler/"/>
      <url>/2021/07/16/arthas-dynamic-compiler/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>前段时间在开发<a href="https://github.com/zzq0324/feature-flag">Feature Flag</a>工具的时候，希望在运行过程中可以动态编译配置类，借助Spring的配置解析来实现配置的解析和设置。</p><p>实际在开发过程中遇到了一些问题，在本地IDE上运行没问题，但是部署到服务器上总会报错，信息如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Source</span><span class="token operator">:</span> <span class="token operator">/</span>enable_open_search<span class="token punctuation">.</span>java<span class="token class-name">Line</span> <span class="token number">92</span><span class="token operator">:</span> cannot find symbol  symbol<span class="token operator">:</span>   variable <span class="token class-name">StringUtils</span>  location<span class="token operator">:</span> <span class="token keyword">class</span> cn<span class="token punctuation">.</span>zzq0324<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>flag<span class="token punctuation">.</span>client<span class="token punctuation">.</span>enable_open_search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>大概意思就是找不到依赖的类了。很好奇为什么找不到类，明明<code>pom.xml</code>中已经有引入对应的包了。</p><h2 id="分析排查"><a href="#分析排查" class="headerlink" title="分析排查"></a>分析排查</h2><p>项目一开始是依赖了第三方jar来实现动态编译的，依赖的jar信息如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.itranswarp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>compiler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本质是通过JDK实现动态编译的。</p><p>另外，项目使用了<code>SpringBoot</code>框架，打包后的jar包是比较特殊的，所以通过JDK常规的动态编译方式会加载不到对应的类，导致编译出错。</p><p>网上也有不少这类的反馈：</p><ul><li><a href="https://github.com/michaelliao/compiler/issues/5">springboot应用打包后, JavaCompiler无法动态加载类</a></li><li>……</li></ul><p>这和<code>SpringBoot</code>打的包有关系，结构如下：<br><img src="https://static.zzq0324.cn/FlUprqZjn7KjMw5S9hhU0JZHsJ3S" alt="image.png"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了减少绕弯路，最终直接使用<code>arthas-memorycompiler</code>来解决问题。</p><h3 id="pom-xml增加依赖"><a href="#pom-xml增加依赖" class="headerlink" title="pom.xml增加依赖"></a>pom.xml增加依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.taobao.arthas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>arthas-memorycompiler<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行动态编译"><a href="#执行动态编译" class="headerlink" title="执行动态编译"></a>执行动态编译</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">cn<span class="token punctuation">.</span>zzq0324<span class="token punctuation">.</span>feature<span class="token punctuation">.</span>flag<span class="token punctuation">.</span>support</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>arthas<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span></span><span class="token class-name">DynamicCompiler</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">Logger</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span><span class="token class-name">LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * description: JdkCompiler &lt;br> * date: 2021/6/11 10:31 下午 &lt;br> * author: zzq0324 &lt;br> * version: 1.0 &lt;br> */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdkCompiler</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">JdkCompiler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> JAVA_FILE_SUFFIX <span class="token operator">=</span> <span class="token string">".java"</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 动态编译并返回Class     *     * @param classPackage    类的包路径     * @param classSimpleName 类名     * @param source          代码     * @return 返回编译后的Class     * @throws IOException     * @throws ClassNotFoundException     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">String</span> classPackage<span class="token punctuation">,</span> <span class="token class-name">String</span> classSimpleName<span class="token punctuation">,</span> <span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">DynamicCompiler</span> dynamicCompiler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicCompiler</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> className <span class="token operator">=</span> classPackage <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> classSimpleName<span class="token punctuation">;</span>        dynamicCompiler<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span><span class="token punctuation">></span></span> classMap <span class="token operator">=</span> dynamicCompiler<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 成功编译，未报错</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>dynamicCompiler<span class="token punctuation">.</span><span class="token function">getErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>classMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Compile class: &#123;&#125; error, error info: &#123;&#125;"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span>            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>dynamicCompiler<span class="token punctuation">.</span><span class="token function">getErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Compile error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上方式简单解决问题。</p>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Arthas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐一款好看的Hexo主题</title>
      <link href="/2021/07/16/recommend-hexo-theme-matery/"/>
      <url>/2021/07/16/recommend-hexo-theme-matery/</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/">Hexo</a>是一个快速、简洁且高效的博客框架，使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。推出以后受到广大开发者的喜爱和好评。通过<code>Hexo</code> + <code>GitHub Pages</code>可以快速、零成本搭建属于自己的博客，非常便捷。</p><h2 id="主题分享"><a href="#主题分享" class="headerlink" title="主题分享"></a>主题分享</h2><p>最近在<code>GitHub</code>闲逛发现一款非常漂亮的<code>Hexo</code>主题，强烈跟大家推荐下，具体如下：</p><ul><li><a href="https://github.com/blinkfox/hexo-theme-matery">项目地址</a></li><li><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">使用说明</a></li><li><a href="http://blinkfox.com/">主题预览地址</a></li></ul><h2 id="主题截图"><a href="#主题截图" class="headerlink" title="主题截图"></a>主题截图</h2><p><img src="https://static.zzq0324.cn/lvh1lJ232bwcAk3wjm-CPmIrNZGd" alt="首页"></p><p><img src="https://static.zzq0324.cn/FgkzbGBdpCFuFb1XEAjq6TxbzTzV" alt="标签"></p><p><img src="https://static.zzq0324.cn/FmYnwvnw-DR2TFf2T9NP4nOhSAj3" alt="分类"></p><p><img src="https://static.zzq0324.cn/Fg_K7bZEup244OtlBhgCU8KNtlL8" alt="归档"></p><p><img src="https://static.zzq0324.cn/FoPhlJMCfKFojHtjSYnpoOROS7NO" alt="关于"></p><p><img src="https://static.zzq0324.cn/FhVnBjsNOrFhpm9aLGlNluPmuO5j" alt="友情链接"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）Jar包发布到Maven中央仓库之发布</title>
      <link href="/2021/07/16/how-to-deploy-jar-to-maven-central-part2/"/>
      <url>/2021/07/16/how-to-deploy-jar-to-maven-central-part2/</url>
      
        <content type="html"><![CDATA[<p>继<a href="https://www.zzq0324.cn/2021/07/16/how-to-deploy-jar-to-maven-central-part1/">（一）Jar包发布到Maven中央仓库之域名认证</a>项目申请通过之后，我们就可以开始准备发布的事情了。</p><h2 id="安装并配置gpg"><a href="#安装并配置gpg" class="headerlink" title="安装并配置gpg"></a>安装并配置gpg</h2><h3 id="安装gpg"><a href="#安装gpg" class="headerlink" title="安装gpg"></a>安装gpg</h3><ul><li>Windows系统可以访问<a href="https://www.gpg4win.org/download.html">https://www.gpg4win.org/download.html</a>进行下载；</li><li>Mac系统可以通过以下脚本安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完成后验证是否成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpg --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置gpg"><a href="#配置gpg" class="headerlink" title="配置gpg"></a>配置gpg</h3><ul><li>生成密钥对</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gpg --gen-key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>按提示填写名字和邮箱等等基本信息，这些都不是重点，最主要的是有个<code>Passphase</code>的选项在填完之后记下来，到时候发布 jar 包的时候要用到。</p><ul><li>查看生成的密钥，并上传至密钥服务器 通过<code>gpg --list-keys</code>可以查看密钥相关信息，例如我的是：<br><img src="https://static.zzq0324.cn/FgygJet71S-EkfWngcHrF4ErOWFZ" alt="密钥"><br>然后通过以下命令上传到服务器：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 上传gpg --keyserver hkp://keyserver.ubuntu.com:11371 --send-keys <span class="token variable">$&#123;xxx截图位置红色框的部分&#125;</span>// 验证gpg --keyserver hkp://keyserver.ubuntu.com:11371 --receive-keys <span class="token variable">$&#123;xxx截图位置红色框的部分&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置Maven相关信息"><a href="#配置Maven相关信息" class="headerlink" title="配置Maven相关信息"></a>配置<code>Maven</code>相关信息</h2><ul><li><code>Maven</code>的<code>settings.xml</code>增加<code>sonatype</code>相关账号信息</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sonatype-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>sonatype账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>sonatype密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sonatype-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>sonatype账号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>sonatype密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>项目的<code>pom.xml</code>增加作者、项目相关信息</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- LICENSE信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>licenses</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>license</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>The Apache Software License, Version2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://www.apache.org/licenses/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distribution</span><span class="token punctuation">></span></span>repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distribution</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>license</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>licenses</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 项目信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scm</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/zzq0324/feature-flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>connection</span><span class="token punctuation">></span></span>https://github.com/zzq0324/feature-flag.git<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>connection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developerConnection</span><span class="token punctuation">></span></span>https://github.com/zzq0324/feature-flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developerConnection</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scm</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 开发者信息 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>developer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>zzq0324<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>email</span><span class="token punctuation">></span></span>zzq0324@qq.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>email</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://www.zzq0324.cn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>developers</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--仓库地址配置信息--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>distributionManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshotRepository</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--id 要与setting.xml server id一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sonatype-snapshot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://s01.oss.sonatype.org/content/repositories/snapshots<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshotRepository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--id 要与setting.xml server id一致 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sonatype-release<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://s01.oss.sonatype.org/service/local/staging/deploy/maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>distributionManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>增加gpg以及文档生成的构建插件</li></ul><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!--java source生成插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-source-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>attach-sources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar-no-fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--java doc生成插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-javadoc-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>attach-javadocs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--gpg签名插件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-gpg-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>sign-artifacts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>verify<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>sign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整信息可以参考<a href="https://github.com/zzq0324/feature-flag/blob/main/pom.xml">feature-flag pom.xml</a></p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h3 id="本地Deploy"><a href="#本地Deploy" class="headerlink" title="本地Deploy"></a>本地Deploy</h3><p>进入项目路径，执行以下命令即可发布：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn clean deploy -Dgpg.passphrase<span class="token operator">=</span><span class="token variable">$&#123;gpg初始化的Passphase&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="sonatype后台release"><a href="#sonatype后台release" class="headerlink" title="sonatype后台release"></a>sonatype后台release</h3><p><img src="https://static.zzq0324.cn/Fluj_9JtqqJ79-FoQpLB_neQDnMc" alt="选择Staging Repositories进行Close"><br><img src="https://static.zzq0324.cn/FthmJBV18Qxo2zSySGl_iyP503Wc" alt="Release并Confirm"><br><img src="https://static.zzq0324.cn/Fsang-okWKGeObB1nUh2O3DsOHkA" alt="操作后查看已经发布"></p><p>更多发布的教程详见官方说明：<a href="https://central.sonatype.org/publish/release/">Releasing Deployment from OSSRH to the Central Repository - Introduction</a></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>Deploy的时候提示<code>gpg: signing failed: Inappropriate ioctl for device</code><br>解决办法如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 先执行以下命令<span class="token builtin class-name">export</span> <span class="token assign-left variable">GPG_TTY</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">tty</span><span class="token variable">)</span></span>// 再执行发布的命令mvn clean deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>发布的时候提示<code> Authorization failed</code>、<code> 403 Forbidden</code><br>完整错误如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy <span class="token punctuation">(</span>default-deploy<span class="token punctuation">)</span> on project feature-flag: Failed to deploy artifacts: Could not transfer artifact cn.zzq0324:feature-flag:jar:1.0.1 from/to sonatype-release <span class="token punctuation">(</span>https://oss.sonatype.org/service/local/staging/deploy/maven2<span class="token punctuation">)</span>: Authorization failed <span class="token keyword">for</span> https://oss.sonatype.org/service/local/staging/deploy/maven2/cn/zzq0324/feature-flag/1.0.1/feature-flag-1.0.1.jar <span class="token number">403</span> Forbidden -<span class="token operator">></span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> To see the full stack trace of the errors, re-run Maven with the -e switch.<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Re-run Maven using the -X switch to <span class="token builtin class-name">enable</span> full debug logging.<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> For <span class="token function">more</span> information about the errors and possible solutions, please <span class="token builtin class-name">read</span> the following articles:<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> <span class="token punctuation">[</span>Help <span class="token number">1</span><span class="token punctuation">]</span> http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面通过搜索发现，我使用的是地址是<code>https://oss.sonatype.org</code>，替换为<code>https://s01.oss.sonatype.org</code>之后解决。详细可以查看<a href="https://issues.sonatype.org/browse/OSSRH-71278">OSSRH-71278</a></p><ul><li>oss sonatype执行close操作的时候报错</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Invalid</span> POM<span class="token operator">:</span><span class="token operator">/</span>cn<span class="token operator">/</span>zzq0324<span class="token operator">/</span>feature<span class="token operator">-</span>flag<span class="token operator">/</span><span class="token number">1.0</span><span class="token number">.1</span><span class="token operator">/</span>feature<span class="token operator">-</span>flag<span class="token operator">-</span><span class="token number">1.0</span><span class="token number">.1</span><span class="token punctuation">.</span>pom<span class="token operator">:</span><span class="token class-name">Project</span> name missing<span class="token punctuation">,</span><span class="token class-name">Project</span> description missing<span class="token punctuation">,</span><span class="token class-name">Project</span> URL missing<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时需要在项目中加入项目相关的描述</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Feature Flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>A feature flag tool to control new feature's open status.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>https://github.com/zzq0324/feature-flag<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这部分详见：<a href="https://central.sonatype.org/publish/requirements/#project-name-description-and-url">Project Name, Description and URL</a></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Sonatype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）Jar包发布到Maven中央仓库之域名认证</title>
      <link href="/2021/07/16/how-to-deploy-jar-to-maven-central-part1/"/>
      <url>/2021/07/16/how-to-deploy-jar-to-maven-central-part1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>经常使用第三方的jar包，最近突发奇想，希望自己写的工具包也能发布到Maven中央仓库，这样自己或者其他人要使用就很方便了，不然本地打包到自建的Maven仓库。</p></blockquote><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><p>在开始之前，准备了以下工作：</p><ul><li>通过<a href="https://www.aliyun.com/">阿里云</a>注册了域名<code>zzq0324.cn</code>，并进行了备案，严格遵照国家相关规定执行；</li><li>通过<a href="https://issues.sonatype.org/secure/Dashboard.jspa">sonatype</a>注册了账号。</li></ul><h2 id="提交Issue"><a href="#提交Issue" class="headerlink" title="提交Issue"></a>提交Issue</h2><p>前置工作准备完成后，接下来开始创建<code>issure</code>，点击<code>Create</code>，如下图：<br><img src="https://static.zzq0324.cn/FkemlY1lGeHSx5K_LjEtNJf1JNZ9" alt="Create Issue"></p><p>字段信息填写如下：</p><ul><li><code>Project</code>: 选择<code>Community Support - Open Source Project Repository Hosting</code></li><li><code>Issue Type</code>: 选择<code>New Project</code>，代表创建新项目</li><li><code>Summary</code>: 可以直接填写项目名称</li><li><code>Description</code>: 填写项目描述，非必填，可为空</li><li><code>Group Id</code>: 填写<code>Maven</code>的<code>GroupId</code>，与<code>pom.xml</code>中保持一致</li><li><code>Project URL</code>: 填写项目地址，例如：<a href="https://github.com/zzq0324/feature-flag">https://github.com/zzq0324/feature-flag</a></li><li><code>SCM URL</code>: 填写<code>Git</code>地址，例如：<a href="https://github.com/zzq0324/feature-flag.git">https://github.com/zzq0324/feature-flag.git</a></li></ul><p>填写后提交表单。很快，系统会自动检测并回复，内容如下：<br><img src="https://static.zzq0324.cn/FmgN7L_wALo_XrmLiYs934VjbEYG" alt="询问域名归属"></p><p>内容大意是询问<code>zzq0324.cn</code>这个域名是不是你本人的？如果是的话麻烦通过任一方式证实：</p><ul><li>增加一个<code>TXT</code>域名解析，这个是最快的方式；</li><li>增加重定向，在访问<code>zzq0324.cn</code>的时候跳转到<a href="https://github.com/zzq0324"> https://github.com/zzq0324</a>。</li></ul><p>同时也有人回复告知如何设置TXT记录<br><img src="https://static.zzq0324.cn/FkakYx23SSHZA1wwk617aXyRjGMs" alt="如何设置TXT记录"></p><p>对应链接：<a href="https://central.sonatype.org/faq/how-to-set-txt-record/#answer">https://central.sonatype.org/faq/how-to-set-txt-record/#answer</a></p><h2 id="域名认证"><a href="#域名认证" class="headerlink" title="域名认证"></a>域名认证</h2><p>参照以上的回复和说明文档，我回到阿里云的域名解析控制台进行了设置<br><img src="https://static.zzq0324.cn/Fn9IbjcbFQT1qIkw_hKoFIkFR9AJ" alt="域名设置"></p><p>设置后过一会，通过以下命令检测是否生效：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">host</span> -t txt OSSRH-70704.zzq0324.cn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有返回<code>TXT</code>对应的配置信息即解析成功。</p><p>最后会看到如下回复，大概就是说明新建项目的审核通过了，可以开始后续的操作了。<br><img src="https://static.zzq0324.cn/Fs-g6VTXzWvCdYTgcdiDE_bZ4uJ5" alt="新项目申请成功"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
            <tag> Sonatype </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐两款好用的Hexo客户端</title>
      <link href="/2021/07/16/recommend-hexo-client/"/>
      <url>/2021/07/16/recommend-hexo-client/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>Hexo</code>是基于<code>Markdown</code>完成渲染的，作为开发人员应该经常会和<code>Markdown</code>语法打交道。如果直接通过纯文本形式进行编写，效率会比较低，特别是涉及到图片需要保存的情况。</p><p>因此，本篇博客将为大家推荐两款<code>Hexo</code>的客户端，以提高大家编写的效率。</p><h2 id="Hexo-Client"><a href="#Hexo-Client" class="headerlink" title="Hexo Client"></a>Hexo Client</h2><h3 id="功能简介"><a href="#功能简介" class="headerlink" title="功能简介"></a>功能简介</h3><ul><li>文章添加</li><li>文章修改</li><li>文章删除</li><li>草稿功能</li><li>多图床支持：aliyun-oss、七牛、sm.ms、Github</li><li>文章搜索</li><li>文章按分类、标签分组展示</li><li>多语言支持</li><li>支持Travis-CI自动部署</li></ul><h3 id="界面演示"><a href="#界面演示" class="headerlink" title="界面演示"></a>界面演示</h3><p><img src="https://static.zzq0324.cn/FsGMNilfL219liMiKsttnwjHeE5v" alt="操作界面展示"></p><h3 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h3><p><a href="https://github.com/gaoyoubo/hexo-client/releases">https://github.com/gaoyoubo/hexo-client/releases</a></p><h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><p>使用说明详见<a href="http://www.mspring.org/tags/Hexo/">http://www.mspring.org/tags/Hexo/</a></p><h2 id="Hexo-Blog-Client"><a href="#Hexo-Blog-Client" class="headerlink" title="Hexo Blog Client"></a>Hexo Blog Client</h2><h3 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h3><p><code>HexoBlogClient</code>是一个采用<code>Electron</code> + <code>Vue</code>开发的Hexo博客管理客户端，基于<a href="https://github.com/gaoyoubo/hexo-client">HexoClient</a>二次开发，在基础上增加了以下优化：</p><ul><li>简单漂亮，文章易读易修改</li><li>支持文章置顶显示</li><li>博客文章的增删改查</li><li>文章支持七牛图片上传</li><li>支持hexo generate</li><li>支持hexo deploy</li></ul><h3 id="界面演示-1"><a href="#界面演示-1" class="headerlink" title="界面演示"></a>界面演示</h3><p><img src="https://static.zzq0324.cn/FprjmwQWuCWwutCWTjnoNdrqrNaD" alt="界面演示"></p><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://github.com/Xonlystar/hexo-blog-client/releases/latest">https://github.com/Xonlystar/hexo-blog-client/releases/latest</a></p><p><em><strong>需要注意的是，以上两款软件都是基于Hexo 3.8.x编译，如果遇到个别主题（例如<code>theme-next</code>）需要依赖Hexo 5.x，则打开可能会报错。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm ERR! code Z_BUF_ERROR</title>
      <link href="/2021/01/24/npm-code-z-buf-error/"/>
      <url>/2021/01/24/npm-code-z-buf-error/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在前端开发中遇到以下情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> ERR<span class="token operator">!</span> code Z_BUF_ERROR<span class="token function">npm</span> ERR<span class="token operator">!</span> errno -5<span class="token function">npm</span> ERR<span class="token operator">!</span> zlib: unexpected end of <span class="token function">file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>百试不得其解，后面在Google找到方案，清除npm缓存解决，语句如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean --force<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码及其含义</title>
      <link href="/2019/07/25/http-status-code-desc/"/>
      <url>/2019/07/25/http-status-code-desc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作为一名开发人员，或许在平时的工作中你会碰到像200、304、404、504这些比较常见的HTTP状态码，相信你也知道它们的含义，但是HTTP状态码不仅仅这些，像什么408、409这些你可能不太了解吧。<br>接下来，会分享一些有你平时未必知道或者了解的HTTP状态码，收藏一下。</p></blockquote><h2 id="HTTP状态码表"><a href="#HTTP状态码表" class="headerlink" title="HTTP状态码表"></a>HTTP状态码表</h2><table><thead><tr><th>状态代码</th><th>状态信息</th><th>含义</th></tr></thead><tbody><tr><td>100</td><td>Continue</td><td>初始的请求已经接受，客户应当继续发送请求的其余部分。（HTTP 1.1新）</td></tr><tr><td>101</td><td>Switching Protocols</td><td>服务器将遵从客户的请求转换到另外一种协议（HTTP 1.1新）</td></tr><tr><td>200</td><td>OK</td><td>一切正常，对GET和POST请求的应答文档跟在后面。</td></tr><tr><td>201</td><td>Created</td><td>服务器已经创建了文档，Location头给出了它的URL。</td></tr><tr><td>202</td><td>Accepted</td><td>已经接受请求，但处理尚未完成。</td></tr><tr><td>203</td><td>Non-Authoritative Information</td><td>文档已经正常地返回，但一些应答头可能不正确，因为使用的是文档的拷贝（HTTP 1.1新）。</td></tr><tr><td>204</td><td>No Content</td><td>没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，而Servlet可以确定用户文档足够新，这个状态代码是很有用的。</td></tr><tr><td>205</td><td>Reset Content</td><td>没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容（HTTP 1.1新）。</td></tr><tr><td>206</td><td>Partial Content</td><td>客户发送了一个带有Range头的GET请求，服务器完成了它（HTTP 1.1新）。</td></tr><tr><td>300</td><td>Multiple Choices</td><td>客户请求的文档可以在多个位置找到，这些位置已经在返回的文档内列出。如果服务器要提出优先选择，则应该在Location应答头指明。</td></tr><tr><td>301</td><td>Moved Permanently</td><td>客户请求的文档在其他地方，新的URL在Location头中给出，浏览器应该自动地访问新的URL。</td></tr><tr><td>302</td><td>Found</td><td>类似于301，但新的URL应该被视为临时性的替代，而不是永久性的。注意，在HTTP1.0中对应的状态信息是“Moved Temporatily”。出现该状态代码时，浏览器能够自动访问新的URL，因此它是一个很有用的状态代码。注意这个状态代码有时候可以和301替换使用。例如，如果浏览器错误地请求<a href="http://host/~user%EF%BC%88%E7%BC%BA%E5%B0%91%E4%BA%86%E5%90%8E%E9%9D%A2%E7%9A%84%E6%96%9C%E6%9D%A0%EF%BC%89%EF%BC%8C%E6%9C%89%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8">http://host/~user（缺少了后面的斜杠），有的服务器</a>返回301，有的则返回302。严格地说，我们只能假定只有当原来的请求是GET时浏览器才会自动重定向。请参见307。</td></tr><tr><td>303</td><td>See Other</td><td>类似于301/302，不同之处在于，如果原来的请求是POST，Location头指定的重定向目标文档应该通过GET提取（HTTP 1.1新）。</td></tr><tr><td>304</td><td>Not Modified</td><td>客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。服务器告 诉客户，原来缓冲的文档还可以继续使用。</td></tr><tr><td>305</td><td>Use Proxy</td><td>客户请求的文档应该通过Location头所指明的代理服务器提取（HTTP 1.1新）。</td></tr><tr><td>307</td><td>Temporary Redirect</td><td>和302 （Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，即使它实际上只能在POST请求的应答是303时才能重定 向。由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向。（HTTP 1.1新）</td></tr><tr><td>400</td><td>Bad Request</td><td>请求出现语法错误。</td></tr><tr><td>401</td><td>Unauthorized</td><td>客户试图未经授权访问受密码保护的页面。应答中会包含一个WWW-Authenticate头，浏览器据此显示用户名字/密码对话框，然后在填 写合适的Authorization头后再次发出请求。</td></tr><tr><td>403</td><td>Forbidden</td><td>资源不可用。服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致。</td></tr><tr><td>404</td><td>Not Found</td><td>无法找到指定位置的资源。这也是一个常用的应答。</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用。（HTTP 1.1新）</td></tr><tr><td>406</td><td>Not Acceptable</td><td>指定的资源已经找到，但它的MIME类型和客户在Accpet头中所指定的不兼容（HTTP 1.1新）。</td></tr><tr><td>407</td><td>Proxy Authentication Required</td><td>类似于401，表示客户必须先经过代理服务器的授权。（HTTP 1.1新）</td></tr><tr><td>408</td><td>Request Timeout</td><td>在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求。（HTTP 1.1新）</td></tr><tr><td>409</td><td>Conflict</td><td>通常和PUT请求有关。由于请求和资源的当前状态相冲突，因此请求不能成功。（HTTP 1.1新）</td></tr><tr><td>410</td><td>Gone</td><td>所请求的文档已经不再可用，而且服务器不知道应该重定向到哪一个地址。它和404的不同在于，返回407表示文档永久地离开了指定的位置，而 404表示由于未知的原因文档不可用。（HTTP 1.1新）</td></tr><tr><td>411</td><td>Length Required</td><td>服务器不能处理请求，除非客户发送一个Content-Length头。（HTTP 1.1新）</td></tr><tr><td>412</td><td>Precondition Failed</td><td>请求头中指定的一些前提条件失败（HTTP 1.1新）。</td></tr><tr><td>413</td><td>Request Entity Too Large</td><td>目标文档的大小超过服务器当前愿意处理的大小。如果服务器认为自己能够稍后再处理该请求，则应该提供一个Retry-After头（HTTP 1.1新）。</td></tr><tr><td>414</td><td>Request URI Too Long</td><td>URI太长（HTTP 1.1新）。</td></tr><tr><td>416</td><td>Requested Range Not Satisfiable</td><td>服务器不能满足客户在请求中指定的Range头。（HTTP 1.1新）</td></tr><tr><td>500</td><td>Internal Server Error</td><td>服务器遇到了意料不到的情况，不能完成客户的请求。</td></tr><tr><td>501</td><td>Not Implemented</td><td>服务器不支持实现请求所需要的功能。例如，客户发出了一个服务器不支持的PUT请求。</td></tr><tr><td>502</td><td>Bad Gateway</td><td>服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。</td></tr><tr><td>503</td><td>Service Unavailable</td><td>服务器由于维护或者负载过重未能应答。例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。</td></tr><tr><td>504</td><td>Gateway Timeout</td><td>由作为代理或网关的服务器使用，表示不能及时地从远程服务器获得应答。（HTTP 1.1新）</td></tr><tr><td>505</td><td>HTTP Version Not Supported</td><td>服务器不支持请求中所指明的HTTP版本。（HTTP 1.1新）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Jasperreport中插入图片</title>
      <link href="/2018/10/24/jasperreport-insert-image/"/>
      <url>/2018/10/24/jasperreport-insert-image/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近在项目开发过程中，需要往导出的报表中增加公司的logo，因此研究了下如何在<code>Jasperreport</code>中插入图片，整理出来记录一下。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>整个设计过程可以使用<code>iReport</code>/<code>Jasreport Studio</code>等可视化工具进行设计报表，过程大致如下：</p><ul><li>使用可视化工具拖拽Image图片控件到需要的位置；</li><li>在Parameter中增加参数imageUrl参数，具体业务运行的时候传递最终需要的图片路径地址；</li><li>针对图片控件设置Expression，具体的Expression需要根据文件情况进行区分，如下：<ul><li>如果是本地文件，可以使用new FileInputStream(new File($P{imageUrl}))；</li><li>如果是远程文件，可以使用new URL($P{imageUrl}).openStream()。</li></ul></li></ul><p>以上步骤设置后，运行业务可以在业务中看到图片，默认会根据图片的尺寸等比例缩放展示，如果需要调整可以在Properties中进行调整。</p>]]></content>
      
      
      <categories>
          
          <category> 技术架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（二）文件预览之域服务器搭建</title>
      <link href="/2018/07/25/office-preview-create-domain-server/"/>
      <url>/2018/07/25/office-preview-create-domain-server/</url>
      
        <content type="html"><![CDATA[<p>关于域服务器的搭建，可以参照网上的教程<a href="https://jingyan.baidu.com/article/acf728fd4a7f80f8e410a353.html">域控制器搭建</a> ，图文并茂，比较详细，相信没有什么大问题。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（一）文件预览之Office Online Server介绍</title>
      <link href="/2018/07/25/office-online-server-introduction/"/>
      <url>/2018/07/25/office-online-server-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="Office-Online介绍"><a href="#Office-Online介绍" class="headerlink" title="Office Online介绍"></a>Office Online介绍</h2><p>Office Online Server是微软2016年推出的支持Office在线处理的服务。其实早在2013年的时候，微软就已经推出该服务了，详情可以看<a href="https://docs.microsoft.com/zh-cn/webappsserver/content-roadmap-for-office-web-apps-server?redirectedfrom=MSDN">Office Online Server</a>。从安装、使用上来说，我觉得两者都差不多，只不过补丁包和一些细节上有些差异，大体的预览效果是一样的。安装完之后，Office Online Server默认就可以支持Word、Excel、PPT以及PDF的预览了。Office Online Server，解决了Office文件在线预览的大问题。最早我们尝试过用POI来做转换，但是POI的转换效果不理想，而且遇到一些比较复杂的文档类型，容易出错。后面也尝试过用Apache的Open Office转换，效果还可以，大部分的文档信息是可以展示，但是文档的格式丢失比较严重，有时候也会出现转换错乱或者错误的问题。使用Office Online Server之后，这一切都将大大改善，在网页上预览的效果跟在客户端上几乎无差别。</p><p>Office Online Server的安装可以参照官方<a href="https://docs.microsoft.com/zh-cn/">https://docs.microsoft.com/zh-cn/</a>的部署说明 不过官方的说明看着会比较抽象。因此，本篇博客包括接下来的几篇，我会重点对于环境的安装以及如果基于Office Online Server开发属于自己的预览服务，做详细的说明。</p><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><h3 id="服务器要求"><a href="#服务器要求" class="headerlink" title="服务器要求"></a>服务器要求</h3><ul><li>系统必需是Windows Server R2；</li><li>服务器需要准备2个，一个用于安装域控制器，另一个安装预览服务。域控制器和预览服务必需不能在同一个机器上，这个是硬性要求。我对域服务的了解不多，目前也不明白微软为什么强制这样要求；</li><li>必需安装了<a href="http://go.microsoft.com/fwlink/p/?LinkId=510096">.NET Framework 4.5.2</a>。</li></ul><h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><ul><li>从微软的<a href="https://www.microsoft.com/Licensing/servicecenter/default.aspx">批量许可服务中心</a>下载Office Online Server的安装包。国内的话可以通过<a href="http://www.itellyou.cn/">itellyou</a>搜索”Online Server”找到下载包；</li><li>下载补丁包<a href="https://www.microsoft.com/en-us/download/details.aspx?id=49063">KB2999226</a>；</li><li>下载<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=35490">中文语言包</a>中文语言包，记得选择对应的语言“Chinese Simplified“，大小有110M，其他的没这么大。</li></ul><p>以上的条件准备之后，接下来就可以开始进入安装环节了。</p><h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><p><img src="https://static.zzq0324.cn/FrXxzueAUMEQfW2gfQ9DXv9OQaI_" alt="Word预览效果"></p><p><img src="https://static.zzq0324.cn/FsTHMiWhMsJL9v7TTpD9NZuXlfyD" alt="Excel预览效果"></p><p><img src="https://static.zzq0324.cn/FlgqdPGiu7bpZ4JANzq74rkBG4D2" alt="PPT预览效果"></p><p><img src="https://static.zzq0324.cn/FqmjwwWfzYzhxk7X3dgY1sd3b5Hc" alt="PDF预览效果"></p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL慢查日志总结</title>
      <link href="/2018/07/25/mysql-slow-log-summary/"/>
      <url>/2018/07/25/mysql-slow-log-summary/</url>
      
        <content type="html"><![CDATA[<h2 id="慢查询日志概念"><a href="#慢查询日志概念" class="headerlink" title="慢查询日志概念"></a>慢查询日志概念</h2><p>MySQL的慢查询日志是MySQL提供的一种日志记录，它用来记录在MySQL中响应时间超过阀值的语句，具体指运行时间超过long_query_time值的SQL，则会被记录到慢查询日志中。long_query_time的默认值为10，意思是运行10S以上的语句。默认情况下，Mysql数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。</p><h2 id="慢查询日志相关参数"><a href="#慢查询日志相关参数" class="headerlink" title="慢查询日志相关参数"></a>慢查询日志相关参数</h2><p>MySQL慢查询的相关参数说明：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 是否开启慢查询日志，1表示开启，0表示关闭</span>slow_query_log<span class="token comment"># 旧版（5.6以下版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</span>log<span class="token operator">-</span>slow<span class="token operator">-</span>querie<span class="token comment"># 新版（5.6及以上版本）MySQL数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件host_name-slow.log</span>slow<span class="token operator">-</span>query<span class="token operator">-</span>log<span class="token operator">-</span><span class="token keyword">file</span><span class="token comment"># 慢查询阈值，当查询时间多于设定的阈值时，记录日志</span>long_query_time<span class="token comment"># 未使用索引的查询也被记录到慢查询日志中（可选项）</span>log_queries_not_using_indexes<span class="token comment"># 日志存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'</span><span class="token comment"># log_output='TABLE'表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中</span><span class="token comment"># 日志存储方式。log_output='FILE'表示将日志存入文件，默认值是'FILE'</span>log_output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="慢查询日志配置"><a href="#慢查询日志配置" class="headerlink" title="慢查询日志配置"></a>慢查询日志配置</h2><h3 id="slow-query-log"><a href="#slow-query-log" class="headerlink" title="slow_query_log"></a>slow_query_log</h3><p>默认情况下<code>slow_query_log</code>的值为OFF，表示慢查询日志是禁用的，可以通过设置<code>slow_query_log</code>的值来开启，如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query_log%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------+------------------------------------------+</span><span class="token operator">|</span> Variable_name       <span class="token operator">|</span> <span class="token keyword">Value</span>                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------+------------------------------------------+</span><span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> <span class="token keyword">OFF</span>                                      <span class="token operator">|</span><span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>localhost<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------+------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query_log%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------+------------------------------------------+</span><span class="token operator">|</span> Variable_name       <span class="token operator">|</span> <span class="token keyword">Value</span>                                    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------+------------------------------------------+</span><span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> <span class="token keyword">ON</span>                                       <span class="token operator">|</span><span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>localhost<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------+------------------------------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过以下方式修改慢查询配置：</p><ul><li>使用set global slow_query_log=1开启了慢查询日志只对当前数据库生效，MySQL重启后则会失效。如果要永久生效，就必须修改配置文件my.cnf（其它系统变量也是如此）;</li><li>修改my.cnf文件，增加或修改参数slow_query_log 和slow_query_log_file后，然后重启MySQL服务器，如下所示:<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">slow_query_log <span class="token operator">=</span><span class="token number">1</span>slow_query_log_file<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>localhost<span class="token operator">-</span>slow<span class="token punctuation">.</span>logmysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'slow_query%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------+---------------------+</span><span class="token operator">|</span> Variable_name       <span class="token operator">|</span> <span class="token keyword">Value</span>               <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------+---------------------+</span><span class="token operator">|</span> slow_query_log      <span class="token operator">|</span> <span class="token keyword">ON</span>                  <span class="token operator">|</span><span class="token operator">|</span> slow_query_log_file <span class="token operator">|</span> <span class="token operator">/</span>usr<span class="token operator">/</span><span class="token keyword">local</span><span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span><span class="token operator">/</span>localhost<span class="token operator">-</span>slow<span class="token punctuation">.</span>log <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------+---------------------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="long-query-time"><a href="#long-query-time" class="headerlink" title="long_query_time"></a>long_query_time</h3><p>那么开启了慢查询日志后，什么样的SQL才会记录到慢查询日志里面呢？这个是由参数long_query_time控制，默认情况下long_query_time的值为10秒，可以使用命令修改，也可以在my.cnf参数里面修改。关于运行时间正好等于long_query_time的情况，并不会被记录下来。也就是说，在mysql源码里是判断大于long_query_time，而非大于等于。从MySQL 5.1开始，long_query_time开始以微秒记录SQL语句运行时间，之前仅用秒为单位记录。如果记录到表里面，只会记录整数部分，不会记录微秒部分。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+-----------+</span><span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-----------+</span><span class="token operator">|</span> long_query_time <span class="token operator">|</span> <span class="token number">10.000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span>mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> long_query_time<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span> mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'long_query_time'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-----------------+-----------+</span><span class="token operator">|</span> Variable_name   <span class="token operator">|</span> <span class="token keyword">Value</span>     <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-----------+</span><span class="token operator">|</span> long_query_time <span class="token operator">|</span> <span class="token number">10.000000</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-----------------+-----------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="log-output"><a href="#log-output" class="headerlink" title="log_output"></a>log_output</h3><p><code>log_output</code>参数是指定日志的存储方式。log_output=’FILE’表示将日志存入文件，默认值是’FILE’。log_output=’TABLE<br>‘表示将日志存入数据库，这样日志信息就会被写入到mysql.slow_log表中。MySQL数据库支持同时两种日志存储方式，配置的时候以逗号隔开即可，如：log_output=’FILE,TABLE’。日志记录到系统的专用日志表中，要比记录到文件耗费更多的系统资源，因此对于需要启用慢查询日志，又需要能够获得更高的系统性能，那么建议优先记录到文件。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%log_output%'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token operator">|</span> log_output    <span class="token operator">|</span> <span class="token keyword">TABLE</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="log-queries-not-using-indexes"><a href="#log-queries-not-using-indexes" class="headerlink" title="log-queries-not-using-indexes"></a>log-queries-not-using-indexes</h3><p>系统变量<code>log-queries-not-using-indexes</code>：未使用索引的查询也被记录到慢查询日志中（可选项）。如果调优的话，建议开启这个选项。另外，开启了这个参数，其实使用full<br>index scan的sql也会被记录到慢查询日志。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_queries_not_using_indexes'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token operator">|</span> log_queries_not_using_indexes <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>  mysql<span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> log_queries_not_using_indexes<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>  mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_queries_not_using_indexes'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token operator">|</span> Variable_name                 <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token operator">|</span> log_queries_not_using_indexes <span class="token operator">|</span> <span class="token keyword">ON</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------------------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="log-slow-admin-statements"><a href="#log-slow-admin-statements" class="headerlink" title="log_slow_admin_statements"></a>log_slow_admin_statements</h3><p>系统变量<code>log_slow_admin_statements</code>表示是否将慢管理语句例如ANALYZE TABLE和ALTER TABLE等记入慢查询日志。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'log_slow_admin_statements'</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------------------+-------+</span><span class="token operator">|</span> Variable_name             <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------+-------+</span><span class="token operator">|</span> log_slow_admin_statements <span class="token operator">|</span> <span class="token keyword">OFF</span>   <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------------------+-------+</span><span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（四）文件预览之预览服务实现</title>
      <link href="/2018/07/25/office-preview-service/"/>
      <url>/2018/07/25/office-preview-service/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>前几篇中介绍了如何搭建预览服务器，在服务搭建起来之后，就应该考虑如何将预览服务与业务对接起来。Office Online Server本身支持WOPI协议，可以很方便的将业务附件与预览服务对接起来。WOPI全称Web Application Open Platform Interface Protocol，基于该协议扩展自己的代码可以实现对文件的鉴权以及下载。主要需要包括两个接口（最好基于restful来定义接口，更清晰）：</p><ul><li>提供一个/files/{fileId}的接口，该接口用于鉴权：也就是通过fileId，判断当前用户是否具备对该附件的访问权限，如果没权限，那么返回HTTP CODE=401；如果有权限，则根据fileId取出文件信息返回，需要包括BaseFileName、Size、Version以及OwnerId；</li><li>提供下载附件的接口，该接口的url必需是上一步中定义的url+”/content”，按restful接口的定义是某个文件的内容。该接口一样会将之前的一些参数信息带回来，该步骤也鉴权。如果没问题，那么预览服务就通过该接口下载附件，进而转换。接下来会重点进行分析。</li></ul><h2 id="详细过程分析"><a href="#详细过程分析" class="headerlink" title="详细过程分析"></a>详细过程分析</h2><p>详细的过程，各个类型的附件预览大同小异，下面会以word为例进行分析。</p><ul><li>用户请求Office Online Server的url：<a href="http://IP:port/wv/wordviewerframe.aspx?WOPISrc=http%3a%2f%2f192.168.2.102%3a8080%2fwopiserver%2ffiles%2f2%3faccess_token%3dOfficeOnlineServer">http://IP:port/wv/wordviewerframe.aspx?WOPISrc=http%3a%2f%2f192.168.2.102%3a8080%2fwopiserver%2ffiles%2f2%3faccess_token%3dOfficeOnlineServer</a>，其中ip,port为预览服务器对应的地址，接下来的/wv/wordviwerframe.aspx是word预览的地址，该地址可以从<a href="http://IP:port/hosting/discovery">http://IP:port/hosting/discovery</a>中得出，接下来就比较重要了，请求要带一个参数WOPISrc，代表要访问的附件需要采用WOPI协议来访问下载（该协议的地址是需要urlencode过的），WOPISrc的地址也是对应上面介绍的自己搭建服务的地址/files/{fileId}；</li><li>Office Onlne Server收到请求后，根据WOPISrc参数进行urldecode，解码之后访问该url进行权限校验，判断是否有权限，如果权限没问题，则可以取到文件的基本信息；</li><li>上一个步骤如果权限没问题，则此时Office Online Server会向/files/{fileId}/content发起文件下载的请求，下载完成之后Office Online Server将会对该文件进行转换，转换完毕之后返回给最开始的调用端进行渲染显示了。</li></ul><blockquote><p>WOPISrc中自己自定义参数，该参数urldecode之后，会带到/files/{fileId}的请求中。</p></blockquote><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>核心代码如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 通过文件唯一标识以及token获取文件的详细信息* * @param fileId 文件的唯一标识，比如可以是MD5或者数据库的id。此处fileId为对应的文件名* @param access_token 访问的token* @return*/</span><span class="token annotation punctuation">@ResponseBody</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/files/&#123;fileId&#125;"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getFileInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"fileId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> fileId<span class="token punctuation">,</span>    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">boolean</span> isTokenValid <span class="token operator">=</span> <span class="token class-name">TokenUtil</span><span class="token punctuation">.</span><span class="token function">verifyToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isTokenValid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 按照wopi协议，返回HTTP CODE=401</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>UNAUTHORIZED<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> fileInfoMap <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFileInfo</span><span class="token punctuation">(</span><span class="token class-name">FILE_Map</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fileInfoMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 根据fileId找不到对应的文件，按照wopi协议返回HTTP CODE=404</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fileInfoMap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** 下载附件内容，与上面的方法在url上的区别为增加了/contents，意为下载该附件下的内容* * @param fileId 文件的唯一标识，比如可以是MD5或者数据库的id。此处fileId为对应的文件名* @param response* @throws Exception*/</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/files/&#123;fileId&#125;/contents"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getFileContent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"fileId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> fileId<span class="token punctuation">,</span>    <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> access_token<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>    <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"download file..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">getFile</span><span class="token punctuation">(</span><span class="token class-name">FILE_Map</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fileId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 根据fileId找不到对应的文件，按照wopi协议返回HTTP CODE=404</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span>            <span class="token string">"attachment;filename="</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"ISO-8859-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Length"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>（三）文件预览之预览服务器搭建</title>
      <link href="/2018/07/25/office-preview-create-server/"/>
      <url>/2018/07/25/office-preview-create-server/</url>
      
        <content type="html"><![CDATA[<h2 id="加入域服务"><a href="#加入域服务" class="headerlink" title="加入域服务"></a>加入域服务</h2><p>域控制服务器搭建完成之后，需要将预览服务器加入到域服务中，具体可以参考<a href="http://jingyan.baidu.com/article/6525d4b13cf316ac7c2e9465.html">如何加入域</a>。</p><h2 id="预览服务安装"><a href="#预览服务安装" class="headerlink" title="预览服务安装"></a>预览服务安装</h2><ul><li>初始化安装Office Online Server需要的前置环境，具体步骤为：打开PowerShell，执行以下命令：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Add-WindowsFeature Web-Server,Web-Mgmt-Tools,Web-Mgmt-Console,Web-WebServer,Web-Common-Http,Web-Default-Doc,Web-Static-Content,Web-Performance,Web-Stat-Compression,Web-Dyn-Compression,Web-Security,Web-Filtering,Web-Windows-Auth,Web-App-Dev,Web-Net-Ext45,Web-Asp-Net45,Web-ISAPI-Ext,Web-ISAPI-Filter,Web-Includes,InkandHandwritingServices,NET-Framework-Features,NET-Framework-Core,NET-HTTP-Activation,NET-Non-HTTP-Activ,NET-WCF-HTTP-Activation45,Windows-Identity-Foundation,Server-Media-Foundation<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>安装<a href="https://www.microsoft.com/en-us/download/details.aspx?id=49091">KB2999226</a>的补丁；</li><li>安装Office Online Server，该安装包需要从微软的批量授权中心下载，或者可以搜索下国内资源。不过还是推荐官方下载；</li><li>安装完成之后，打开PowerShell执行以下命令，将Office Onlie模块加载进来，其中后面的url根据自己定义的domain修改下:<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Import-Module -Name OfficeWebApps New-OfficeWebAppsFarm -InternalURL http://myofficeserver.com –AllowHttp –EditingEnabled<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>安装Office Online Server的<a href="https://www.microsoft.com/zh-CN/download/details.aspx?id=35490">汉化包下载地址</a> ,记得语言选择“Chinese Simplied“；</li><li>汉化包安装完成之后，建议重启下系统。当然，我自己安装的时候没重启也没发现有问题，重启下是比较保险；</li><li>访问http://预览服务IP/hosting/discovery ,如果看到以下界面，代表安装成功：<br><img src="https://static.zzq0324.cn/FvLRQ5r83u0tWrkN8hNgvtXpUase" alt="Discovery界面"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Office文件在线预览方案</title>
      <link href="/2018/07/24/office-preview-online-plan/"/>
      <url>/2018/07/24/office-preview-online-plan/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>实现Office文件的在线预览，对于使用系统或者平台的用户来说，无疑是一个福音；但是对于开发者而言，这个是一个比较头疼的问题。如何来假设自己的服务，将Office文件转换成可在浏览器中显示的内容，并且还不失真，这是有相当难度的。主要有以下几个原因：</p><ul><li>Office本身的协议并不是透明的，内部怎么存储外人并不知道。虽然Office2007开始采用了OpenXML协议，但是具体的信息咱们了解还是有限；</li><li>Office的存储结构比较复杂，特别是涉及图表、单元格等，往往是比较复杂的。</li></ul><h2 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h2><h3 id="借助第三方平台转换"><a href="#借助第三方平台转换" class="headerlink" title="借助第三方平台转换"></a>借助第三方平台转换</h3><p>借助第三方平台来做Office文件的转换，优点比较省心、省事，直接调用即可；缺点是不可控，自己内部的文件需要传输到第三方的平台，有可能导致信息泄露，另外，调用第三方的API可能是需要付费的，一般是按调用次数收费。比较常用的第三方平台是：</p><ul><li><a href="https://www.yozodcs.com/">永中云转换</a> ：国内比较流行的转换服务，按次数收费；</li><li><a href="http://webofficeapi.com/">WebOfficeApi </a>：从目前的介绍来看，应该是免费的，没具体使用过。有用过的朋友可以告知下；</li><li><a href="https://yiqixie.com/">一起写</a>：这个也是钉钉目前接入的第三方服务。</li></ul><h3 id="自己搭建预览服务"><a href="#自己搭建预览服务" class="headerlink" title="自己搭建预览服务"></a>自己搭建预览服务</h3><ul><li><a href="http://www.openoffice.org/">OpenOffice </a>：Apache开源的Office转换服务，不过转换的效果不是很理想，好些文档会失真，有些错乱；</li><li><a href="https://technet.microsoft.com/zh-cn/library/jj219455(v=office.16)">Office Online Server</a>：该服务是微软开放出来的，目前预览是免费的，在线编辑的话是收费的。不过对于基本的需求，预览应该满足需要了，在这种场景下就可以免费使用微软的服务来搭建自己的预览服务了，效果很好，而且适配web/mobile。这也是接下来的博客中会重点介绍的，包括环境准备、安装以及服务搭建。</li></ul><h2 id="预览服务相关文章汇总"><a href="#预览服务相关文章汇总" class="headerlink" title="预览服务相关文章汇总"></a>预览服务相关文章汇总</h2><ul><li><a href="https://www.zzq0324.cn/2018/07/25/office-online-server-introduction/">（一）文件预览之Office Online Server介绍</a></li><li><a href="https://www.zzq0324.cn/2018/07/25/office-preview-create-domain-server/">（二）文件预览之域服务器搭建</a></li><li><a href="https://www.zzq0324.cn/2018/07/24/office-preview-create-server/">（三）文件预览之预览服务器搭建</a></li><li><a href="https://www.zzq0324.cn/2018/07/24/office-preview-service/">（四）文件预览之预览服务实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件预览 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL utf8mb4编码</title>
      <link href="/2018/07/24/mysql-utf8mb4-charset-encoding/"/>
      <url>/2018/07/24/mysql-utf8mb4-charset-encoding/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>我们在创建MySQL数据库的时候经常会指定编码，如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test <span class="token keyword">default</span> <span class="token keyword">character</span> <span class="token keyword">set</span> utf8mb4 <span class="token keyword">collate</span> utf8mb4_unicode_ci<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的语句，在创建之后指定默认编码为utf8mb4，现在比较多的项目倾向于使用这种编码。那么它和utf8有什么区别呢？</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><code>utf8mb4</code>是在<code>MySQL 5.5.3</code>加入的，mb4就是most bytes 4的意思，专门用来兼容四字节的unicode。其实，<code>utf8mb4</code>是utf8的超集，理论上原来使用utf8，然后将字符集修改为<code>utf8mb4</code>，也会不会对已有的utf8编码读取产生任何问题。当然，为了节省空间，一般情况下使用utf8也就够了。既然utf8应付日常使用完全没有问题，那为什么还要使用utf8mb4呢? 低版本的MySQL支持的utf8编码，最大字符长度为 3 字节，如果遇到 4 字节的字符就会出现错误了。</p><p>三个字节的 UTF-8 最大能编码的 Unicode 字符是 0xFFFF，也就是 Unicode 中的基本多文平面（BMP）。也就是说，任何不在基本多文平面的 Unicode字符，都无法使用MySQL原有的 utf8 字符集存储。这些不在BMP中的字符包括哪些呢？最常见的就是Emoji 表情（Emoji 是一种特殊的 Unicode 编码，常见于 ios 和 android 手机上），和一些不常用的汉字，以及任何新增的 Unicode 字符等等。</p><p>因此，使用<code>utf8mb4</code>就可以有效的解决这个问题，比如在内容中插入表情符号等也可以得到更好的支持。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
